{"version":3,"sources":["node_modules/remarkable/lib/rules_block/state_block.js"],"names":["StateBlock","src","parser","options","env","tokens","ch","s","start","pos","len","indent","indent_found","bMarks","eMarks","tShift","blkIndent","line","lineMax","tight","parentType","ddIndent","level","result","length","charCodeAt","push","prototype","isEmpty","skipEmptyLines","from","max","skipSpaces","skipChars","code","skipCharsBack","min","getLines","begin","end","keepLastLF","i","first","last","queue","shift","Math","slice","Array","join","module","exports"],"mappings":"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","file":"state_block.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Parser state class\n\n'use strict';\n\n\nfunction StateBlock(src, parser, options, env, tokens) {\n  var ch, s, start, pos, len, indent, indent_found;\n\n  this.src = src;\n\n  // Shortcuts to simplify nested calls\n  this.parser = parser;\n\n  this.options = options;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // indent for each line\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent\n                       // (for example, if we are in list)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.parentType = 'root'; // if `list`, block parser stops on two newlines\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent = 0;\n  indent_found = false;\n\n  for (start = pos = indent = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (ch === 0x20/* space */) {\n        indent++;\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n\n      indent_found = false;\n      indent = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== 0x20/* space */) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, first, last, queue, shift,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  // Opt: don't use push queue for single line;\n  if (line + 1 === end) {\n    first = this.bMarks[line] + Math.min(this.tShift[line], indent);\n    last = keepLastLF ? this.eMarks[line] + 1 : this.eMarks[line];\n    return this.src.slice(first, last);\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    shift = this.tShift[line];\n    if (shift > indent) { shift = indent; }\n    if (shift < 0) { shift = 0; }\n\n    first = this.bMarks[line] + shift;\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    queue[i] = this.src.slice(first, last);\n  }\n\n  return queue.join('');\n};\n\n\nmodule.exports = StateBlock;\n"]}