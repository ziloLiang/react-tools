{"version":3,"sources":["node_modules/remarkable/lib/rules_block/htmlblock.js"],"names":["block_names","require","HTML_TAG_OPEN_RE","HTML_TAG_CLOSE_RE","isLetter","ch","lc","module","exports","htmlblock","state","startLine","endLine","silent","match","nextLine","pos","bMarks","max","eMarks","shift","tShift","options","html","src","charCodeAt","slice","toLowerCase","lineMax","isEmpty","line","tokens","push","type","level","lines","content","getLines"],"mappings":"AAAA;;AAEA;;AAGA,IAAIA,cAAcC,QAAQ,uBAAR,CAAlB;;AAGA,IAAIC,mBAAmB,2BAAvB;AACA,IAAIC,oBAAoB,2BAAxB;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB;AACA,MAAIC,KAAKD,KAAK,IAAd,CAFoB,CAEA;AACpB,SAAQC,MAAM,IAAP,CAAW,OAAX,IAAwBA,MAAM,IAA9B,CAAkC,OAAzC;AACD;;AAEDC,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,MAA9C,EAAsD;AACrE,MAAIR,EAAJ;AAAA,MAAQS,KAAR;AAAA,MAAeC,QAAf;AAAA,MACIC,MAAMN,MAAMO,MAAN,CAAaN,SAAb,CADV;AAAA,MAEIO,MAAMR,MAAMS,MAAN,CAAaR,SAAb,CAFV;AAAA,MAGIS,QAAQV,MAAMW,MAAN,CAAaV,SAAb,CAHZ;;AAKAK,SAAOI,KAAP;;AAEA,MAAI,CAACV,MAAMY,OAAN,CAAcC,IAAnB,EAAyB;AAAE,WAAO,KAAP;AAAe;;AAE1C,MAAIH,QAAQ,CAAR,IAAaJ,MAAM,CAAN,IAAWE,GAA5B,EAAiC;AAAE,WAAO,KAAP;AAAe;;AAElD,MAAIR,MAAMc,GAAN,CAAUC,UAAV,CAAqBT,GAArB,MAA8B,IAAlC,CAAsC,OAAtC,EAA+C;AAAE,aAAO,KAAP;AAAe;;AAEhEX,OAAKK,MAAMc,GAAN,CAAUC,UAAV,CAAqBT,MAAM,CAA3B,CAAL;;AAEA,MAAIX,OAAO,IAAP,CAAW,OAAX,IAAsBA,OAAO,IAAjC,CAAqC,OAArC,EAA8C;AAC5C;AACA,UAAIQ,MAAJ,EAAY;AAAE,eAAO,IAAP;AAAc;AAE7B,KAJD,MAIO,IAAIR,OAAO,IAAP,CAAW,OAAX,IAAsBD,SAASC,EAAT,CAA1B,EAAwC;;AAE7C;AACA,QAAIA,OAAO,IAAX,CAAe,OAAf,EAAwB;AACtB;AACAS,gBAAQJ,MAAMc,GAAN,CAAUE,KAAV,CAAgBV,GAAhB,EAAqBE,GAArB,EAA0BJ,KAA1B,CAAgCX,iBAAhC,CAAR;AACA,YAAI,CAACW,KAAL,EAAY;AAAE,iBAAO,KAAP;AAAe;AAC9B,OAJD,MAIO;AACL;AACAA,cAAQJ,MAAMc,GAAN,CAAUE,KAAV,CAAgBV,GAAhB,EAAqBE,GAArB,EAA0BJ,KAA1B,CAAgCZ,gBAAhC,CAAR;AACA,UAAI,CAACY,KAAL,EAAY;AAAE,eAAO,KAAP;AAAe;AAC9B;AACD;AACA,QAAId,YAAYc,MAAM,CAAN,EAASa,WAAT,EAAZ,MAAwC,IAA5C,EAAkD;AAAE,aAAO,KAAP;AAAe;AACnE,QAAId,MAAJ,EAAY;AAAE,aAAO,IAAP;AAAc;AAE7B,GAhBM,MAgBA;AACL,WAAO,KAAP;AACD;;AAED;AACA;AACAE,aAAWJ,YAAY,CAAvB;AACA,SAAOI,WAAWL,MAAMkB,OAAjB,IAA4B,CAAClB,MAAMmB,OAAN,CAAcd,QAAd,CAApC,EAA6D;AAC3DA;AACD;;AAEDL,QAAMoB,IAAN,GAAaf,QAAb;AACAL,QAAMqB,MAAN,CAAaC,IAAb,CAAkB;AAChBC,UAAM,WADU;AAEhBC,WAAOxB,MAAMwB,KAFG;AAGhBC,WAAO,CAAExB,SAAF,EAAaD,MAAMoB,IAAnB,CAHS;AAIhBM,aAAS1B,MAAM2B,QAAN,CAAe1B,SAAf,EAA0BI,QAA1B,EAAoC,CAApC,EAAuC,IAAvC;AAJO,GAAlB;;AAOA,SAAO,IAAP;AACD,CAxDD","file":"htmlblock.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\n\n\nvar HTML_TAG_OPEN_RE = /^<([a-zA-Z]{1,15})[\\s\\/>]/;\nvar HTML_TAG_CLOSE_RE = /^<\\/([a-zA-Z]{1,15})[\\s>]/;\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\nmodule.exports = function htmlblock(state, startLine, endLine, silent) {\n  var ch, match, nextLine,\n      pos = state.bMarks[startLine],\n      max = state.eMarks[startLine],\n      shift = state.tShift[startLine];\n\n  pos += shift;\n\n  if (!state.options.html) { return false; }\n\n  if (shift > 3 || pos + 2 >= max) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  ch = state.src.charCodeAt(pos + 1);\n\n  if (ch === 0x21/* ! */ || ch === 0x3F/* ? */) {\n    // Directive start / comment start / processing instruction start\n    if (silent) { return true; }\n\n  } else if (ch === 0x2F/* / */ || isLetter(ch)) {\n\n    // Probably start or end of tag\n    if (ch === 0x2F/* \\ */) {\n      // closing tag\n      match = state.src.slice(pos, max).match(HTML_TAG_CLOSE_RE);\n      if (!match) { return false; }\n    } else {\n      // opening tag\n      match = state.src.slice(pos, max).match(HTML_TAG_OPEN_RE);\n      if (!match) { return false; }\n    }\n    // Make sure tag name is valid\n    if (block_names[match[1].toLowerCase()] !== true) { return false; }\n    if (silent) { return true; }\n\n  } else {\n    return false;\n  }\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till empty line (block end).\n  nextLine = startLine + 1;\n  while (nextLine < state.lineMax && !state.isEmpty(nextLine)) {\n    nextLine++;\n  }\n\n  state.line = nextLine;\n  state.tokens.push({\n    type: 'htmlblock',\n    level: state.level,\n    lines: [ startLine, state.line ],\n    content: state.getLines(startLine, nextLine, 0, true)\n  });\n\n  return true;\n};\n"]}