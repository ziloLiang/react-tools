{"version":3,"sources":["node_modules/react-highlight/node_modules/highlight.js/lib/languages/less.js"],"names":["module","exports","hljs","IDENT_RE","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"],"mappings":"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","file":"less.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"]}