/**
 * @file tooltip Component
 * 配置params: body[要显示的文字] spacing[间距 默认 0] trigger: [触发事件 默认 hover]
 * @description RT
 * @author liangdong06
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _domHelpers = require('dom-helpers');

var _domHelpers2 = _interopRequireDefault(_domHelpers);

require('./tootips.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltips = (_temp = _class = function (_React$Component) {
    _inherits(Tooltips, _React$Component);

    function Tooltips(props) {
        _classCallCheck(this, Tooltips);

        var _this = _possibleConstructorReturn(this, (Tooltips.__proto__ || Object.getPrototypeOf(Tooltips)).call(this, props));

        _this.container = null;
        return _this;
    }

    _createClass(Tooltips, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.removeFromBody();
        }
    }, {
        key: 'insertContainer',
        value: function insertContainer() {
            _reactDom2.default.unstable_renderSubtreeIntoContainer(this, this.overlay, this.container);
        }
    }, {
        key: 'appendToBody',
        value: function appendToBody() {
            var _this2 = this;

            if (!this.container && this.props.body !== undefined) {
                this.timer = setTimeout(function () {
                    _this2.container = document.createElement('div');
                    document.body.appendChild(_this2.container);
                    _this2.insertContainer();
                }, this.props.timeout);
            }
        }
    }, {
        key: 'removeFromBody',
        value: function removeFromBody() {
            clearTimeout(this.timer);
            this.timer = null;
            if (this.container) {
                _reactDom2.default.unmountComponentAtNode(this.container);
                document.body.removeChild(this.container);
                this.container = null;
            }
        }
    }, {
        key: 'onMouseEnter',
        value: function onMouseEnter(e) {
            if (!this.timer && !this.container) {
                this.appendToBody();
            }
        }
    }, {
        key: 'onMouseMove',
        value: function onMouseMove(e) {
            if (!this.timer && !this.container) {
                this.appendToBody();
            }
        }
    }, {
        key: 'onMouseLeave',
        value: function onMouseLeave(e) {
            this.removeFromBody();
        }
    }, {
        key: 'generateProps',
        value: function generateProps() {
            switch (this.props.trigger) {
                case 'hover':
                    return {
                        onMouseEnter: this.onMouseEnter.bind(this),
                        onMouseMove: this.onMouseMove.bind(this),
                        onMouseLeave: this.onMouseLeave.bind(this)
                    };
                default:
                    // statements_def
                    break;
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var triggerProps = this.generateProps();

            this.overlay = _react2.default.createElement(
                Position,
                _extends({
                    target: this,
                    container: this.container
                }, this.props),
                this.props.body
            );

            return (0, _react.cloneElement)(this.props.children, triggerProps);
        }
    }]);

    return Tooltips;
}(_react2.default.Component), _class.defaultProps = {
    trigger: 'hover',
    placement: 'bottom',
    timeout: 300,
    className: '',
    spacing: 3
}, _temp);
exports.default = Tooltips;

var Position = function (_React$Component2) {
    _inherits(Position, _React$Component2);

    function Position(props) {
        _classCallCheck(this, Position);

        var _this3 = _possibleConstructorReturn(this, (Position.__proto__ || Object.getPrototypeOf(Position)).call(this, props));

        _this3.state = {
            position: {
                left: 0,
                top: 0
            }
        };
        return _this3;
    }

    _createClass(Position, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.updatePosition();
        }
    }, {
        key: 'updatePosition',
        value: function updatePosition() {
            // console.log(this.caculatePosition())
            this.setState({
                position: this.caculatePosition()
            });
        }
    }, {
        key: 'caculatePosition',
        value: function caculatePosition() {
            var _props = this.props,
                target = _props.target,
                placement = _props.placement,
                spacing = _props.spacing;

            var $target = _reactDom2.default.findDOMNode(target);
            var $tooltip = _reactDom2.default.findDOMNode(this);
            var targetBox = _domHelpers.query.offset($target);
            var tooltipBox = _domHelpers.query.offset($tooltip);
            var pos = {
                tooltipW: tooltipBox.width,
                tooltipH: tooltipBox.height
            };
            switch (placement) {
                // case 'right':
                //     Object.assign(pos, {
                //         positionLeft: targetBox.left + targetBox.width,
                //         positionTop: targetBox.top
                //     });
                //     break;
                // case 'left':
                //     Object.assign(pos, {
                //         left: targetBox.left + spacing,
                //         top: targetBox.top - tooltipBox.height
                //     });
                //     break;
                // case 'top':
                //     Object.assign(pos, {
                //         left: targetBox.left + (targetBox.width - tooltipBox.width) / 2,
                //         top: targetBox.top - tooltipBox.height
                //     });
                //     break;
                case 'bottom':
                    Object.assign(pos, {
                        left: targetBox.left,
                        top: targetBox.top + targetBox.height + spacing
                    });
                    break;
                case 'bottom right':
                    Object.assign(pos, {
                        left: targetBox.left + targetBox.width - tooltipBox.width,
                        top: targetBox.top + targetBox.height + spacing
                    });
                    break;
                default:
                    // statements_def
                    break;
            }
            return pos;
        }
    }, {
        key: 'render',
        value: function render() {

            var styles = {
                left: this.state.position.left,
                top: this.state.position.top
            };
            var className = 'tooltip ' + this.props.className;

            return _react2.default.createElement(
                'div',
                { className: className, style: styles },
                this.props.children
            );
        }
    }]);

    return Position;
}(_react2.default.Component);