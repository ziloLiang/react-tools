{"version":3,"sources":["node_modules/react/lib/EnterLeaveEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ReactDOMComponentTree","SyntheticMouseEvent","keyOf","topLevelTypes","eventTypes","mouseEnter","registrationName","onMouseEnter","dependencies","topMouseOut","topMouseOver","mouseLeave","onMouseLeave","EnterLeaveEventPlugin","extractEvents","topLevelType","targetInst","nativeEvent","nativeEventTarget","relatedTarget","fromElement","win","window","doc","ownerDocument","defaultView","parentWindow","from","to","related","toElement","getClosestInstanceFromNode","fromNode","getNodeFromInstance","toNode","leave","getPooled","type","target","enter","accumulateEnterLeaveDispatches","module","exports"],"mappings":"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","file":"EnterLeaveEventPlugin.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EnterLeaveEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: keyOf({ onMouseEnter: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  },\n  mouseLeave: {\n    registrationName: keyOf({ onMouseLeave: null }),\n    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === topLevelTypes.topMouseOut) {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n\n};\n\nmodule.exports = EnterLeaveEventPlugin;"]}