{"version":3,"sources":["node_modules/highlight.js/lib/languages/python.js"],"names":["module","exports","hljs","PROMPT","className","begin","STRING","contains","BACKSLASH_ESCAPE","variants","end","relevance","APOS_STRING_MODE","QUOTE_STRING_MODE","NUMBER","BINARY_NUMBER_RE","C_NUMBER_RE","PARAMS","aliases","keywords","keyword","built_in","illegal","HASH_COMMENT_MODE","beginKeywords","UNDERSCORE_TITLE_MODE","endsWithParent"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,MAAIC,SAAS;AACXC,eAAW,MADA,EACSC,OAAO;AADhB,GAAb;AAGA,MAAIC,SAAS;AACXF,eAAW,QADA;AAEXG,cAAU,CAACL,KAAKM,gBAAN,CAFC;AAGXC,cAAU,CACR;AACEJ,aAAO,aADT,EACwBK,KAAK,KAD7B;AAEEH,gBAAU,CAACJ,MAAD,CAFZ;AAGEQ,iBAAW;AAHb,KADQ,EAMR;AACEN,aAAO,aADT,EACwBK,KAAK,KAD7B;AAEEH,gBAAU,CAACJ,MAAD,CAFZ;AAGEQ,iBAAW;AAHb,KANQ,EAWR;AACEN,aAAO,WADT,EACsBK,KAAK,GAD3B;AAEEC,iBAAW;AAFb,KAXQ,EAeR;AACEN,aAAO,WADT,EACsBK,KAAK,GAD3B;AAEEC,iBAAW;AAFb,KAfQ,EAmBR;AACEN,aAAO,SADT,EACoBK,KAAK;AADzB,KAnBQ,EAsBR;AACEL,aAAO,SADT,EACoBK,KAAK;AADzB,KAtBQ,EAyBRR,KAAKU,gBAzBG,EA0BRV,KAAKW,iBA1BG;AAHC,GAAb;AAgCA,MAAIC,SAAS;AACXV,eAAW,QADA,EACUO,WAAW,CADrB;AAEXF,cAAU,CACR,EAACJ,OAAOH,KAAKa,gBAAL,GAAwB,SAAhC,EADQ,EAER,EAACV,OAAO,sBAAR,EAFQ,EAGR,EAACA,OAAOH,KAAKc,WAAL,GAAmB,SAA3B,EAHQ;AAFC,GAAb;AAQA,MAAIC,SAAS;AACXb,eAAW,QADA;AAEXC,WAAO,IAFI,EAEEK,KAAK,IAFP;AAGXH,cAAU,CAAC,MAAD,EAASJ,MAAT,EAAiBW,MAAjB,EAAyBR,MAAzB;AAHC,GAAb;AAKA,SAAO;AACLY,aAAS,CAAC,IAAD,EAAO,KAAP,CADJ;AAELC,cAAU;AACRC,eACE,wFACA,mFADA,GAEA,yCAJM;AAKRC,gBACE;AANM,KAFL;AAULC,aAAS,gBAVJ;AAWLf,cAAU,CACRJ,MADQ,EAERW,MAFQ,EAGRR,MAHQ,EAIRJ,KAAKqB,iBAJG,EAKR;AACEd,gBAAU,CACR,EAACL,WAAW,UAAZ,EAAwBoB,eAAe,KAAvC,EADQ,EAER,EAACpB,WAAW,OAAZ,EAAqBoB,eAAe,OAApC,EAFQ,CADZ;AAKEd,WAAK,GALP;AAMEY,eAAS,WANX;AAOEf,gBAAU,CACRL,KAAKuB,qBADG,EAERR,MAFQ,EAGR;AACEZ,eAAO,IADT,EACeqB,gBAAgB,IAD/B;AAEEP,kBAAU;AAFZ,OAHQ;AAPZ,KALQ,EAqBR;AACEf,iBAAW,MADb;AAEEC,aAAO,UAFT,EAEqBK,KAAK;AAF1B,KArBQ,EAyBR;AACEL,aAAO,kBADT,CAC4B;AAD5B,KAzBQ;AAXL,GAAP;AAyCD,CA1FD","file":"python.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  var PROMPT = {\n    className: 'meta',  begin: /^(>>>|\\.\\.\\.) /\n  };\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: /(u|b)?r?'''/, end: /'''/,\n        contains: [PROMPT],\n        relevance: 10\n      },\n      {\n        begin: /(u|b)?r?\"\"\"/, end: /\"\"\"/,\n        contains: [PROMPT],\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)'/, end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)\"/, end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /(b|br)'/, end: /'/\n      },\n      {\n        begin: /(b|br)\"/, end: /\"/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n  var NUMBER = {\n    className: 'number', relevance: 0,\n    variants: [\n      {begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},\n      {begin: '\\\\b(0o[0-7]+)[lLjJ]?'},\n      {begin: hljs.C_NUMBER_RE + '[lLjJ]?'}\n    ]\n  };\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/, end: /\\)/,\n    contains: ['self', PROMPT, NUMBER, STRING]\n  };\n  return {\n    aliases: ['py', 'gyp'],\n    keywords: {\n      keyword:\n        'and elif is global as in if from raise for except finally print import pass return ' +\n        'exec else break not with class assert yield try while continue del or def lambda ' +\n        'async await nonlocal|10 None True False',\n      built_in:\n        'Ellipsis NotImplemented'\n    },\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      STRING,\n      hljs.HASH_COMMENT_MODE,\n      {\n        variants: [\n          {className: 'function', beginKeywords: 'def'},\n          {className: 'class', beginKeywords: 'class'}\n        ],\n        end: /:/,\n        illegal: /[${=;\\n,]/,\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          PARAMS,\n          {\n            begin: /->/, endsWithParent: true,\n            keywords: 'None'\n          }\n        ]\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/, end: /$/\n      },\n      {\n        begin: /\\b(print|exec)\\(/ // donâ€™t highlight keywords-turned-functions in Python 3\n      }\n    ]\n  };\n};"]}