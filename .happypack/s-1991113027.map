{"version":3,"sources":["node_modules/react-highlight/node_modules/highlight.js/lib/languages/coq.js"],"names":["module","exports","hljs","keywords","keyword","built_in","contains","QUOTE_STRING_MODE","COMMENT","C_NUMBER_MODE","className","excludeBegin","begin","end"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B,SAAO;AACLC,cAAU;AACRC,eACE,2EACA,uDADA,GAEA,6EAFA,GAGA,2EAHA,GAIA,0EAJA,GAKA,wEALA,GAMA,4EANA,GAOA,uEAPA,GAQA,6EARA,GASA,6EATA,GAUA,2EAVA,GAWA,6EAXA,GAYA,2EAZA,GAaA,+EAbA,GAcA,6EAdA,GAeA,2EAfA,GAgBA,4EAhBA,GAiBA,+EAjBA,GAkBA,8EAlBA,GAmBA,yEAnBA,GAoBA,8EApBA,GAqBA,yEArBA,GAsBA,8EAtBA,GAuBA,4EAvBA,GAwBA,+BA1BM;AA2BRC,gBACE,gFACA,iEADA,GAEA,uEAFA,GAGA,2EAHA,GAIA,mEAJA,GAKA,sEALA,GAMA,uEANA,GAOA,iEAPA,GAQA,0EARA,GASA,2EATA,GAUA,yEAVA,GAWA,uEAXA,GAYA,yEAZA,GAaA,8EAbA,GAcA,sEAdA,GAeA,qEAfA,GAgBA,mEAhBA,GAiBA,6EAjBA,GAkBA,qEAlBA,GAmBA,wEAnBA,GAoBA;AAhDM,KADL;AAmDLC,cAAU,CACRJ,KAAKK,iBADG,EAERL,KAAKM,OAAL,CAAa,QAAb,EAAuB,QAAvB,CAFQ,EAGRN,KAAKO,aAHG,EAIR;AACEC,iBAAW,MADb;AAEEC,oBAAc,IAFhB;AAGEC,aAAO,SAHT;AAIEC,WAAK;AAJP,KAJQ,EAUR,EAACD,OAAO,OAAR,EAVQ,CAUS;AAVT;AAnDL,GAAP;AAgED,CAjED","file":"coq.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +\n        'match mod Prop return Set then Type using where with ' +\n        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +\n        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +\n        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +\n        'Conjectures Constant constr Constraint Constructors Context Corollary ' +\n        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +\n        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +\n        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +\n        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +\n        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +\n        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +\n        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +\n        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +\n        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +\n        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +\n        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +\n        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +\n        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +\n        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +\n        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +\n        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +\n        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +\n        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +\n        'Verbose Visibility where with',\n      built_in:\n        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +\n        'autounfold before bottom btauto by case case_eq cbn cbv change ' +\n        'classical_left classical_right clear clearbody cofix compare compute ' +\n        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +\n        'cycle decide decompose dependent destruct destruction dintuition ' +\n        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +\n        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +\n        'einjection eleft elim elimtype enough equality erewrite eright ' +\n        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +\n        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +\n        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +\n        'induction injection instantiate intro intro_pattern intros intuition ' +\n        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +\n        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +\n        'record red refine reflexivity remember rename repeat replace revert ' +\n        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +\n        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +\n        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +\n        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +\n        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +\n        'unfold unify until using vm_compute with'\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'type',\n        excludeBegin: true,\n        begin: '\\\\|\\\\s*',\n        end: '\\\\w+'\n      },\n      {begin: /[-=]>/} // relevance booster\n    ]\n  };\n};"]}