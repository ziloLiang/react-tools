{"version":3,"sources":["node_modules/remarkable/lib/rules_inline/footnote_inline.js"],"names":["parseLinkLabel","require","module","exports","footnote_inline","state","silent","labelStart","labelEnd","footnoteId","oldLength","max","posMax","start","pos","src","charCodeAt","level","options","maxNesting","env","footnotes","list","length","push","type","id","linkLevel","tokens","parser","tokenize","splice"],"mappings":"AAAA;;AAEA;;AAEA,IAAIA,iBAAiBC,QAAQ,6BAAR,CAArB;;AAGAC,OAAOC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;AACvD,MAAIC,UAAJ;AAAA,MACIC,QADJ;AAAA,MAEIC,UAFJ;AAAA,MAGIC,SAHJ;AAAA,MAIIC,MAAMN,MAAMO,MAJhB;AAAA,MAKIC,QAAQR,MAAMS,GALlB;;AAOA,MAAID,QAAQ,CAAR,IAAaF,GAAjB,EAAsB;AAAE,WAAO,KAAP;AAAe;AACvC,MAAIN,MAAMU,GAAN,CAAUC,UAAV,CAAqBH,KAArB,MAAgC,IAApC,CAAwC,OAAxC,EAAiD;AAAE,aAAO,KAAP;AAAe;AAClE,MAAIR,MAAMU,GAAN,CAAUC,UAAV,CAAqBH,QAAQ,CAA7B,MAAoC,IAAxC,CAA4C,OAA5C,EAAqD;AAAE,aAAO,KAAP;AAAe;AACtE,MAAIR,MAAMY,KAAN,IAAeZ,MAAMa,OAAN,CAAcC,UAAjC,EAA6C;AAAE,WAAO,KAAP;AAAe;;AAE9DZ,eAAaM,QAAQ,CAArB;AACAL,aAAWR,eAAeK,KAAf,EAAsBQ,QAAQ,CAA9B,CAAX;;AAEA;AACA,MAAIL,WAAW,CAAf,EAAkB;AAAE,WAAO,KAAP;AAAe;;AAEnC;AACA;AACA;AACA,MAAI,CAACF,MAAL,EAAa;AACX,QAAI,CAACD,MAAMe,GAAN,CAAUC,SAAf,EAA0B;AAAEhB,YAAMe,GAAN,CAAUC,SAAV,GAAsB,EAAtB;AAA2B;AACvD,QAAI,CAAChB,MAAMe,GAAN,CAAUC,SAAV,CAAoBC,IAAzB,EAA+B;AAAEjB,YAAMe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,GAA2B,EAA3B;AAAgC;AACjEb,iBAAaJ,MAAMe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,CAAyBC,MAAtC;;AAEAlB,UAAMS,GAAN,GAAYP,UAAZ;AACAF,UAAMO,MAAN,GAAeJ,QAAf;;AAEAH,UAAMmB,IAAN,CAAW;AACTC,YAAM,cADG;AAETC,UAAIjB,UAFK;AAGTQ,aAAOZ,MAAMY;AAHJ,KAAX;AAKAZ,UAAMsB,SAAN;AACAjB,gBAAYL,MAAMuB,MAAN,CAAaL,MAAzB;AACAlB,UAAMwB,MAAN,CAAaC,QAAb,CAAsBzB,KAAtB;AACAA,UAAMe,GAAN,CAAUC,SAAV,CAAoBC,IAApB,CAAyBb,UAAzB,IAAuC,EAAEmB,QAAQvB,MAAMuB,MAAN,CAAaG,MAAb,CAAoBrB,SAApB,CAAV,EAAvC;AACAL,UAAMsB,SAAN;AACD;;AAEDtB,QAAMS,GAAN,GAAYN,WAAW,CAAvB;AACAH,QAAMO,MAAN,GAAeD,GAAf;AACA,SAAO,IAAP;AACD,CA7CD","file":"footnote_inline.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Process inline footnotes (^[...])\n\n'use strict';\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\n\nmodule.exports = function footnote_inline(state, silent) {\n  var labelStart,\n      labelEnd,\n      footnoteId,\n      oldLength,\n      max = state.posMax,\n      start = state.pos;\n\n  if (start + 2 >= max) { return false; }\n  if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n  if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n  if (state.level >= state.options.maxNesting) { return false; }\n\n  labelStart = start + 2;\n  labelEnd = parseLinkLabel(state, start + 1);\n\n  // parser failed to find ']', so it's not a valid note\n  if (labelEnd < 0) { return false; }\n\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    if (!state.env.footnotes) { state.env.footnotes = {}; }\n    if (!state.env.footnotes.list) { state.env.footnotes.list = []; }\n    footnoteId = state.env.footnotes.list.length;\n\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    state.push({\n      type: 'footnote_ref',\n      id: footnoteId,\n      level: state.level\n    });\n    state.linkLevel++;\n    oldLength = state.tokens.length;\n    state.parser.tokenize(state);\n    state.env.footnotes.list[footnoteId] = { tokens: state.tokens.splice(oldLength) };\n    state.linkLevel--;\n  }\n\n  state.pos = labelEnd + 1;\n  state.posMax = max;\n  return true;\n};\n"]}