{"version":3,"sources":["node_modules/webpack-hot-middleware/client-overlay.js"],"names":["clientOverlay","document","createElement","styles","background","color","lineHeight","whiteSpace","fontFamily","fontSize","position","zIndex","padding","left","right","top","bottom","overflow","dir","key","style","ansiHTML","require","colors","reset","black","red","green","yellow","blue","magenta","cyan","lightgrey","darkgrey","setColors","Entities","AllHtmlEntities","entities","exports","showProblems","type","lines","innerHTML","forEach","msg","encode","div","marginBottom","problemType","appendChild","body","clear","parentNode","removeChild","problemColors","errors","warnings","slice","toUpperCase"],"mappings":";;AAAA;;AAEA,IAAIA,gBAAgBC,SAASC,aAAT,CAAuB,KAAvB,CAApB;AACA,IAAIC,SAAS;AACXC,cAAY,kBADD;AAEXC,SAAO,SAFI;AAGXC,cAAY,KAHD;AAIXC,cAAY,KAJD;AAKXC,cAAY,4BALD;AAMXC,YAAU,MANC;AAOXC,YAAU,OAPC;AAQXC,UAAQ,IARG;AASXC,WAAS,MATE;AAUXC,QAAM,CAVK;AAWXC,SAAO,CAXI;AAYXC,OAAK,CAZM;AAaXC,UAAQ,CAbG;AAcXC,YAAU,MAdC;AAeXC,OAAK;AAfM,CAAb;AAiBA,KAAK,IAAIC,GAAT,IAAgBhB,MAAhB,EAAwB;AACtBH,gBAAcoB,KAAd,CAAoBD,GAApB,IAA2BhB,OAAOgB,GAAP,CAA3B;AACD;;AAED,IAAIE,WAAWC,QAAQ,WAAR,CAAf;AACA,IAAIC,SAAS;AACXC,SAAO,CAAC,aAAD,EAAgB,aAAhB,CADI;AAEXC,SAAO,QAFI;AAGXC,OAAK,QAHM;AAIXC,SAAO,QAJI;AAKXC,UAAQ,QALG;AAMXC,QAAM,QANK;AAOXC,WAAS,QAPE;AAQXC,QAAM,QARK;AASXC,aAAW,QATA;AAUXC,YAAU;AAVC,CAAb;AAYAZ,SAASa,SAAT,CAAmBX,MAAnB;;AAEA,IAAIY,WAAWb,QAAQ,eAAR,EAAyBc,eAAxC;AACA,IAAIC,WAAW,IAAIF,QAAJ,EAAf;;AAEAG,QAAQC,YAAR,GACA,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjCzC,gBAAc0C,SAAd,GAA0B,EAA1B;AACAD,QAAME,OAAN,CAAc,UAASC,GAAT,EAAc;AAC1BA,UAAMvB,SAASgB,SAASQ,MAAT,CAAgBD,GAAhB,CAAT,CAAN;AACA,QAAIE,MAAM7C,SAASC,aAAT,CAAuB,KAAvB,CAAV;AACA4C,QAAI1B,KAAJ,CAAU2B,YAAV,GAAyB,MAAzB;AACAD,QAAIJ,SAAJ,GAAgBM,YAAYR,IAAZ,IAAoB,MAApB,GAA6BI,GAA7C;AACA5C,kBAAciD,WAAd,CAA0BH,GAA1B;AACD,GAND;AAOA,MAAI7C,SAASiD,IAAb,EAAmB;AACjBjD,aAASiD,IAAT,CAAcD,WAAd,CAA0BjD,aAA1B;AACD;AACF,CAbD;;AAeAsC,QAAQa,KAAR,GACA,SAASA,KAAT,GAAiB;AACf,MAAIlD,SAASiD,IAAT,IAAiBlD,cAAcoD,UAAnC,EAA+C;AAC7CnD,aAASiD,IAAT,CAAcG,WAAd,CAA0BrD,aAA1B;AACD;AACF,CALD;;AAOA,IAAIsD,gBAAgB;AAClBC,UAAQhC,OAAOG,GADG;AAElB8B,YAAUjC,OAAOK;AAFC,CAApB;;AAKA,SAASoB,WAAT,CAAsBR,IAAtB,EAA4B;AAC1B,MAAInC,QAAQiD,cAAcd,IAAd,KAAuBjB,OAAOG,GAA1C;AACA,SACE,oCAAoCrB,KAApC,GAA4C,qDAA5C,GACEmC,KAAKiB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBC,WAAlB,EADF,GAEA,SAHF;AAKD","file":"client-overlay.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["/*eslint-env browser*/\n\nvar clientOverlay = document.createElement('div');\nvar styles = {\n  background: 'rgba(0,0,0,0.85)',\n  color: '#E8E8E8',\n  lineHeight: '1.2',\n  whiteSpace: 'pre',\n  fontFamily: 'Menlo, Consolas, monospace',\n  fontSize: '13px',\n  position: 'fixed',\n  zIndex: 9999,\n  padding: '10px',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  overflow: 'auto',\n  dir: 'ltr'\n};\nfor (var key in styles) {\n  clientOverlay.style[key] = styles[key];\n}\n\nvar ansiHTML = require('ansi-html');\nvar colors = {\n  reset: ['transparent', 'transparent'],\n  black: '181818',\n  red: 'E36049',\n  green: 'B3CB74',\n  yellow: 'FFD080',\n  blue: '7CAFC2',\n  magenta: '7FACCA',\n  cyan: 'C3C2EF',\n  lightgrey: 'EBE7E3',\n  darkgrey: '6D7891'\n};\nansiHTML.setColors(colors);\n\nvar Entities = require('html-entities').AllHtmlEntities;\nvar entities = new Entities();\n\nexports.showProblems =\nfunction showProblems(type, lines) {\n  clientOverlay.innerHTML = '';\n  lines.forEach(function(msg) {\n    msg = ansiHTML(entities.encode(msg));\n    var div = document.createElement('div');\n    div.style.marginBottom = '26px';\n    div.innerHTML = problemType(type) + ' in ' + msg;\n    clientOverlay.appendChild(div);\n  });\n  if (document.body) {\n    document.body.appendChild(clientOverlay);\n  }\n};\n\nexports.clear =\nfunction clear() {\n  if (document.body && clientOverlay.parentNode) {\n    document.body.removeChild(clientOverlay);\n  }\n};\n\nvar problemColors = {\n  errors: colors.red,\n  warnings: colors.yellow\n};\n\nfunction problemType (type) {\n  var color = problemColors[type] || colors.red;\n  return (\n    '<span style=\"background-color:#' + color + '; color:#fff; padding:2px 4px; border-radius: 2px\">' +\n      type.slice(0, -1).toUpperCase() +\n    '</span>'\n  );\n}\n"]}