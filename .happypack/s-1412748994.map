{"version":3,"sources":["node_modules/remarkable/lib/rules_core/abbr2.js"],"names":["PUNCT_CHARS","regEscape","s","replace","module","exports","abbr2","state","i","j","l","tokens","token","text","nodes","pos","level","reg","m","regText","blockTokens","env","abbreviations","abbrRegExp","split","map","join","Object","keys","x","substr","sort","a","b","length","RegExp","type","children","content","lastIndex","exec","push","slice","index","title","concat"],"mappings":"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","file":"abbr2.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\n\nvar PUNCT_CHARS = ' \\n()[]\\'\".,!?-';\n\n\n// from Google closure library\n// http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021\nfunction regEscape(s) {\n  return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1');\n}\n\n\nmodule.exports = function abbr2(state) {\n  var i, j, l, tokens, token, text, nodes, pos, level, reg, m, regText,\n      blockTokens = state.tokens;\n\n  if (!state.env.abbreviations) { return; }\n  if (!state.env.abbrRegExp) {\n    regText = '(^|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])'\n            + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n                      return x.substr(1);\n                    }).sort(function (a, b) {\n                      return b.length - a.length;\n                    }).map(regEscape).join('|') + ')'\n            + '($|[' + PUNCT_CHARS.split('').map(regEscape).join('') + '])';\n    state.env.abbrRegExp = new RegExp(regText, 'g');\n  }\n  reg = state.env.abbrRegExp;\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') { continue; }\n    tokens = blockTokens[j].children;\n\n    // We scan from the end, to keep position when new tags added.\n    for (i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n      if (token.type !== 'text') { continue; }\n\n      pos = 0;\n      text = token.content;\n      reg.lastIndex = 0;\n      level = token.level;\n      nodes = [];\n\n      while ((m = reg.exec(text))) {\n        if (reg.lastIndex > pos) {\n          nodes.push({\n            type: 'text',\n            content: text.slice(pos, m.index + m[1].length),\n            level: level\n          });\n        }\n\n        nodes.push({\n          type: 'abbr_open',\n          title: state.env.abbreviations[':' + m[2]],\n          level: level++\n        });\n        nodes.push({\n          type: 'text',\n          content: m[2],\n          level: level\n        });\n        nodes.push({\n          type: 'abbr_close',\n          level: --level\n        });\n        pos = reg.lastIndex - m[3].length;\n      }\n\n      if (!nodes.length) { continue; }\n\n      if (pos < text.length) {\n        nodes.push({\n          type: 'text',\n          content: text.slice(pos),\n          level: level\n        });\n      }\n\n      // replace current node\n      blockTokens[j].children = tokens = [].concat(tokens.slice(0, i), nodes, tokens.slice(i + 1));\n    }\n  }\n};\n"]}