{"version":3,"sources":["node_modules/remarkable/lib/rules_block/table.js"],"names":["getLine","state","line","pos","bMarks","blkIndent","max","eMarks","src","substr","module","exports","table","startLine","endLine","silent","ch","lineText","i","nextLine","rows","cell","aligns","t","tableLines","tbodyLines","tShift","charCodeAt","test","split","length","trim","push","indexOf","replace","tokens","type","lines","level","align","content","children","substring"],"mappings":"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","file":"table.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// GFM table, non-standard\n\n'use strict';\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, rows, cell,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least three lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.tShift[nextLine] < state.blkIndent) { return false; }\n\n  // first character of the second line should be '|' or '-'\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  lineText = getLine(state, startLine + 1);\n  if (!/^[-:| ]+$/.test(lineText)) { return false; }\n\n  rows = lineText.split('|');\n  if (rows <= 2) { return false; }\n  aligns = [];\n  for (i = 0; i < rows.length; i++) {\n    t = rows[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === rows.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n  if (aligns.length !== rows.length) { return false; }\n  if (silent) { return true; }\n\n  state.tokens.push({\n    type: 'table_open',\n    lines: tableLines = [ startLine, 0 ],\n    level: state.level++\n  });\n  state.tokens.push({\n    type: 'thead_open',\n    lines: [ startLine, startLine + 1 ],\n    level: state.level++\n  });\n\n  state.tokens.push({\n    type: 'tr_open',\n    lines: [ startLine, startLine + 1 ],\n    level: state.level++\n  });\n  for (i = 0; i < rows.length; i++) {\n    state.tokens.push({\n      type: 'th_open',\n      align: aligns[i],\n      lines: [ startLine, startLine + 1 ],\n      level: state.level++\n    });\n    state.tokens.push({\n      type: 'inline',\n      content: rows[i].trim(),\n      lines: [ startLine, startLine + 1 ],\n      level: state.level,\n      children: []\n    });\n    state.tokens.push({ type: 'th_close', level: --state.level });\n  }\n  state.tokens.push({ type: 'tr_close', level: --state.level });\n  state.tokens.push({ type: 'thead_close', level: --state.level });\n\n  state.tokens.push({\n    type: 'tbody_open',\n    lines: tbodyLines = [ startLine + 2, 0 ],\n    level: state.level++\n  });\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.tShift[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    rows = lineText.replace(/^\\||\\|$/g, '').split('|');\n\n    state.tokens.push({ type: 'tr_open', level: state.level++ });\n    for (i = 0; i < rows.length; i++) {\n      state.tokens.push({ type: 'td_open', align: aligns[i], level: state.level++ });\n      // 0x7c === '|'\n      cell = rows[i].substring(\n          rows[i].charCodeAt(0) === 0x7c ? 1 : 0,\n          rows[i].charCodeAt(rows[i].length - 1) === 0x7c ? rows[i].length - 1 : rows[i].length\n      ).trim();\n      state.tokens.push({\n        type: 'inline',\n        content: cell,\n        level: state.level,\n        children: []\n      });\n      state.tokens.push({ type: 'td_close', level: --state.level });\n    }\n    state.tokens.push({ type: 'tr_close', level: --state.level });\n  }\n  state.tokens.push({ type: 'tbody_close', level: --state.level });\n  state.tokens.push({ type: 'table_close', level: --state.level });\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n"]}