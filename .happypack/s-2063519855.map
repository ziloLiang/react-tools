{"version":3,"sources":["node_modules/remarkable/lib/rules_block/fences.js"],"names":["module","exports","fences","state","startLine","endLine","silent","marker","len","params","nextLine","mem","haveEndMarker","pos","bMarks","tShift","max","eMarks","src","charCodeAt","skipChars","slice","trim","indexOf","blkIndent","skipSpaces","line","tokens","push","type","content","getLines","lines","level"],"mappings":"AAAA;;AAEA;;AAGAA,OAAOC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmD;AAClE,MAAIC,MAAJ;AAAA,MAAYC,GAAZ;AAAA,MAAiBC,MAAjB;AAAA,MAAyBC,QAAzB;AAAA,MAAmCC,GAAnC;AAAA,MACIC,gBAAgB,KADpB;AAAA,MAEIC,MAAMV,MAAMW,MAAN,CAAaV,SAAb,IAA0BD,MAAMY,MAAN,CAAaX,SAAb,CAFpC;AAAA,MAGIY,MAAMb,MAAMc,MAAN,CAAab,SAAb,CAHV;;AAKA,MAAIS,MAAM,CAAN,GAAUG,GAAd,EAAmB;AAAE,WAAO,KAAP;AAAe;;AAEpCT,WAASJ,MAAMe,GAAN,CAAUC,UAAV,CAAqBN,GAArB,CAAT;;AAEA,MAAIN,WAAW,IAAX,CAAe,OAAf,IAA0BA,WAAW,IAAzC,CAA8C,OAA9C,EAAuD;AACrD,aAAO,KAAP;AACD;;AAED;AACAI,QAAME,GAAN;AACAA,QAAMV,MAAMiB,SAAN,CAAgBP,GAAhB,EAAqBN,MAArB,CAAN;;AAEAC,QAAMK,MAAMF,GAAZ;;AAEA,MAAIH,MAAM,CAAV,EAAa;AAAE,WAAO,KAAP;AAAe;;AAE9BC,WAASN,MAAMe,GAAN,CAAUG,KAAV,CAAgBR,GAAhB,EAAqBG,GAArB,EAA0BM,IAA1B,EAAT;;AAEA,MAAIb,OAAOc,OAAP,CAAe,GAAf,KAAuB,CAA3B,EAA8B;AAAE,WAAO,KAAP;AAAe;;AAE/C;AACA,MAAIjB,MAAJ,EAAY;AAAE,WAAO,IAAP;AAAc;;AAE5B;AACAI,aAAWN,SAAX;;AAEA,WAAS;AACPM;AACA,QAAIA,YAAYL,OAAhB,EAAyB;AACvB;AACA;AACA;AACD;;AAEDQ,UAAMF,MAAMR,MAAMW,MAAN,CAAaJ,QAAb,IAAyBP,MAAMY,MAAN,CAAaL,QAAb,CAArC;AACAM,UAAMb,MAAMc,MAAN,CAAaP,QAAb,CAAN;;AAEA,QAAIG,MAAMG,GAAN,IAAab,MAAMY,MAAN,CAAaL,QAAb,IAAyBP,MAAMqB,SAAhD,EAA2D;AACzD;AACA;AACA;AACA;AACD;;AAED,QAAIrB,MAAMe,GAAN,CAAUC,UAAV,CAAqBN,GAArB,MAA8BN,MAAlC,EAA0C;AAAE;AAAW;;AAEvD,QAAIJ,MAAMY,MAAN,CAAaL,QAAb,IAAyBP,MAAMqB,SAA/B,IAA4C,CAAhD,EAAmD;AACjD;AACA;AACD;;AAEDX,UAAMV,MAAMiB,SAAN,CAAgBP,GAAhB,EAAqBN,MAArB,CAAN;;AAEA;AACA,QAAIM,MAAMF,GAAN,GAAYH,GAAhB,EAAqB;AAAE;AAAW;;AAElC;AACAK,UAAMV,MAAMsB,UAAN,CAAiBZ,GAAjB,CAAN;;AAEA,QAAIA,MAAMG,GAAV,EAAe;AAAE;AAAW;;AAE5BJ,oBAAgB,IAAhB;AACA;AACA;AACD;;AAED;AACAJ,QAAML,MAAMY,MAAN,CAAaX,SAAb,CAAN;;AAEAD,QAAMuB,IAAN,GAAahB,YAAYE,gBAAgB,CAAhB,GAAoB,CAAhC,CAAb;AACAT,QAAMwB,MAAN,CAAaC,IAAb,CAAkB;AAChBC,UAAM,OADU;AAEhBpB,YAAQA,MAFQ;AAGhBqB,aAAS3B,MAAM4B,QAAN,CAAe3B,YAAY,CAA3B,EAA8BM,QAA9B,EAAwCF,GAAxC,EAA6C,IAA7C,CAHO;AAIhBwB,WAAO,CAAE5B,SAAF,EAAaD,MAAMuB,IAAnB,CAJS;AAKhBO,WAAO9B,MAAM8B;AALG,GAAlB;;AAQA,SAAO,IAAP;AACD,CArFD","file":"fences.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fences(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  params = state.src.slice(pos, max).trim();\n\n  if (params.indexOf('`') >= 0) { return false; }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.tShift[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.tShift[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.tShift[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n  state.tokens.push({\n    type: 'fence',\n    params: params,\n    content: state.getLines(startLine + 1, nextLine, len, true),\n    lines: [ startLine, state.line ],\n    level: state.level\n  });\n\n  return true;\n};\n"]}