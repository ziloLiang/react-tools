{"version":3,"sources":["node_modules/remarkable/lib/index.js"],"names":["assign","require","Renderer","ParserCore","ParserBlock","ParserInline","Ruler","config","StateCore","instance","str","env","src","options","tokens","inlineMode","inline","block","renderer","typographer","Remarkable","preset","core","ruler","configure","set","prototype","presets","self","Error","components","Object","keys","forEach","name","rules","enable","use","plugin","parse","state","process","render","parseInline","renderInline","module","exports","utils"],"mappings":"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","file":"index.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["'use strict';\n\n/**\n * Local dependencies\n */\n\nvar assign       = require('./common/utils').assign;\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar Ruler        = require('./ruler');\n\n/**\n * Preset configs\n */\n\nvar config = {\n  'default':    require('./configs/default'),\n  'full':       require('./configs/full'),\n  'commonmark': require('./configs/commonmark')\n};\n\n/**\n * The `StateCore` class manages state.\n *\n * @param {Object} `instance` Remarkable instance\n * @param {String} `str` Markdown string\n * @param {Object} `env`\n */\n\nfunction StateCore(instance, str, env) {\n  this.src = str;\n  this.env = env;\n  this.options = instance.options;\n  this.tokens = [];\n  this.inlineMode = false;\n\n  this.inline = instance.inline;\n  this.block = instance.block;\n  this.renderer = instance.renderer;\n  this.typographer = instance.typographer;\n}\n\n/**\n * The main `Remarkable` class. Create an instance of\n * `Remarkable` with a `preset` and/or `options`.\n *\n * @param {String} `preset` If no preset is given, `default` is used.\n * @param {Object} `options`\n */\n\nfunction Remarkable(preset, options) {\n  if (typeof preset !== 'string') {\n    options = preset;\n    preset = 'default';\n  }\n\n  this.inline   = new ParserInline();\n  this.block    = new ParserBlock();\n  this.core     = new ParserCore();\n  this.renderer = new Renderer();\n  this.ruler    = new Ruler();\n\n  this.options  = {};\n  this.configure(config[preset]);\n  this.set(options || {});\n}\n\n/**\n * Set options as an alternative to passing them\n * to the constructor.\n *\n * ```js\n * md.set({typographer: true});\n * ```\n * @param {Object} `options`\n * @api public\n */\n\nRemarkable.prototype.set = function (options) {\n  assign(this.options, options);\n};\n\n/**\n * Batch loader for components rules states, and options\n *\n * @param  {Object} `presets`\n */\n\nRemarkable.prototype.configure = function (presets) {\n  var self = this;\n\n  if (!presets) { throw new Error('Wrong `remarkable` preset, check name/content'); }\n  if (presets.options) { self.set(presets.options); }\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enable(presets.components[name].rules, true);\n      }\n    });\n  }\n};\n\n/**\n * Use a plugin.\n *\n * ```js\n * var md = new Remarkable();\n *\n * md.use(plugin1)\n *   .use(plugin2, opts)\n *   .use(plugin3);\n * ```\n *\n * @param  {Function} `plugin`\n * @param  {Object} `options`\n * @return {Object} `Remarkable` for chaining\n */\n\nRemarkable.prototype.use = function (plugin, options) {\n  plugin(this, options);\n  return this;\n};\n\n\n/**\n * Parse the input `string` and return a tokens array.\n * Modifies `env` with definitions data.\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {Array} Array of tokens\n */\n\nRemarkable.prototype.parse = function (str, env) {\n  var state = new StateCore(this, str, env);\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * The main `.render()` method that does all the magic :)\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {String} Rendered HTML.\n */\n\nRemarkable.prototype.render = function (str, env) {\n  env = env || {};\n  return this.renderer.render(this.parse(str, env), this.options, env);\n};\n\n/**\n * Parse the given content `string` as a single string.\n *\n * @param  {String} `string`\n * @param  {Object} `env`\n * @return {Array} Array of tokens\n */\n\nRemarkable.prototype.parseInline = function (str, env) {\n  var state = new StateCore(this, str, env);\n  state.inlineMode = true;\n  this.core.process(state);\n  return state.tokens;\n};\n\n/**\n * Render a single content `string`, without wrapping it\n * to paragraphs\n *\n * @param  {String} `str`\n * @param  {Object} `env`\n * @return {String}\n */\n\nRemarkable.prototype.renderInline = function (str, env) {\n  env = env || {};\n  return this.renderer.render(this.parseInline(str, env), this.options, env);\n};\n\n/**\n * Expose `Remarkable`\n */\n\nmodule.exports = Remarkable;\n\n/**\n * Expose `utils`, Useful helper functions for custom\n * rendering.\n */\n\nmodule.exports.utils = require('./common/utils');\n"]}