{"version":3,"sources":["node_modules/highlight.js/lib/languages/cpp.js"],"names":["module","exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"mappings":"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","file":"cpp.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U)?L?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U)?R\"', end: '\"',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '\\'\\\\\\\\?.', end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: '<', end: '>',\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using class asm case typeid ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignof constexpr decltype ' +\n      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};"]}