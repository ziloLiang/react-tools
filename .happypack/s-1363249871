/**
 * @file Radio Component
 * @description 类radio组件
 * @author liangdong06
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./styles.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Text = function (_React$Component) {
    _inherits(Text, _React$Component);

    function Text(props) {
        _classCallCheck(this, Text);

        var _this = _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, props));

        _this.state = {
            checkedIndex: _this.findDefault(props)
        };
        return _this;
    }

    _createClass(Text, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.state.checkedIndex = this.findDefault(nextProps);
        }
    }, {
        key: 'findDefault',
        value: function findDefault(props) {
            var defaultValue = props.defaultValue,
                radioList = props.radioList;

            var idx = -1;
            if (defaultValue) {
                for (var i = radioList.length - 1; i >= 0; i--) {
                    if (radioList[i].value === defaultValue) {
                        idx = i;
                        break;
                    }
                }
            }
            return idx;
        }
    }, {
        key: 'changeHandle',
        value: function changeHandle(item, idx) {
            this.setState({
                checkedIndex: idx
            });
            if (this.props.trigger) {
                this.props.trigger(item, idx);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            // const {desc, } =  this.props;

            return _react2.default.createElement(
                'div',
                { className: 'erp-radio-wrap' },
                this.props.radioList.map(function (item, idx) {
                    return _react2.default.createElement(
                        'label',
                        { key: item.value, onClick: _this2.changeHandle.bind(_this2, item, idx) },
                        _react2.default.createElement(
                            'span',
                            { className: 'radio' },
                            _this2.state.checkedIndex === idx ? _react2.default.createElement('span', { className: 'radio-inner' }) : null
                        ),
                        _react2.default.createElement(
                            'span',
                            { className: 'desc' },
                            item.desc
                        )
                    );
                })
            );
        }
    }]);

    return Text;
}(_react2.default.Component);

exports.default = Text;