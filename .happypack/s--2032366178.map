{"version":3,"sources":["node_modules/core-js/modules/_bind.js"],"names":["aFunction","require","isObject","invoke","arraySlice","slice","factories","construct","F","len","args","n","i","Function","join","module","exports","bind","that","fn","partArgs","call","arguments","bound","concat","length","prototype"],"mappings":"AAAA;;AACA,IAAIA,YAAaC,QAAQ,eAAR,CAAjB;AAAA,IACIC,WAAaD,QAAQ,cAAR,CADjB;AAAA,IAEIE,SAAaF,QAAQ,WAAR,CAFjB;AAAA,IAGIG,aAAa,GAAGC,KAHpB;AAAA,IAIIC,YAAa,EAJjB;;AAMA,IAAIC,YAAY,SAAZA,SAAY,CAASC,CAAT,EAAYC,GAAZ,EAAiBC,IAAjB,EAAsB;AACpC,MAAG,EAAED,OAAOH,SAAT,CAAH,EAAuB;AACrB,SAAI,IAAIK,IAAI,EAAR,EAAYC,IAAI,CAApB,EAAuBA,IAAIH,GAA3B,EAAgCG,GAAhC;AAAoCD,QAAEC,CAAF,IAAO,OAAOA,CAAP,GAAW,GAAlB;AAApC,KACAN,UAAUG,GAAV,IAAiBI,SAAS,KAAT,EAAgB,kBAAkBF,EAAEG,IAAF,CAAO,GAAP,CAAlB,GAAgC,GAAhD,CAAjB;AACD,GAAC,OAAOR,UAAUG,GAAV,EAAeD,CAAf,EAAkBE,IAAlB,CAAP;AACH,CALD;;AAOAK,OAAOC,OAAP,GAAiBH,SAASI,IAAT,IAAiB,SAASA,IAAT,CAAcC,IAAd,CAAmB,cAAnB,EAAkC;AAClE,MAAIC,KAAWnB,UAAU,IAAV,CAAf;AAAA,MACIoB,WAAWhB,WAAWiB,IAAX,CAAgBC,SAAhB,EAA2B,CAA3B,CADf;AAEA,MAAIC,QAAQ,SAARA,KAAQ,GAAS,aAAc;AACjC,QAAIb,OAAOU,SAASI,MAAT,CAAgBpB,WAAWiB,IAAX,CAAgBC,SAAhB,CAAhB,CAAX;AACA,WAAO,gBAAgBC,KAAhB,GAAwBhB,UAAUY,EAAV,EAAcT,KAAKe,MAAnB,EAA2Bf,IAA3B,CAAxB,GAA2DP,OAAOgB,EAAP,EAAWT,IAAX,EAAiBQ,IAAjB,CAAlE;AACD,GAHD;AAIA,MAAGhB,SAASiB,GAAGO,SAAZ,CAAH,EAA0BH,MAAMG,SAAN,GAAkBP,GAAGO,SAArB;AAC1B,SAAOH,KAAP;AACD,CATD","file":"_bind.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["'use strict';\nvar aFunction  = require('./_a-function')\n  , isObject   = require('./_is-object')\n  , invoke     = require('./_invoke')\n  , arraySlice = [].slice\n  , factories  = {};\n\nvar construct = function(F, len, args){\n  if(!(len in factories)){\n    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /*, args... */){\n  var fn       = aFunction(this)\n    , partArgs = arraySlice.call(arguments, 1);\n  var bound = function(/* args... */){\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if(isObject(fn.prototype))bound.prototype = fn.prototype;\n  return bound;\n};"]}