{"version":3,"sources":["node_modules/remarkable/lib/rules_inline/links.js"],"names":["parseLinkLabel","require","parseLinkDestination","parseLinkTitle","normalizeReference","module","exports","links","state","silent","labelStart","labelEnd","label","href","title","pos","ref","code","isImage","oldPos","max","posMax","start","marker","src","charCodeAt","level","options","maxNesting","linkContent","linkLevel","slice","env","references","push","type","alt","substr","parser","tokenize"],"mappings":"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","file":"links.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Process [links](<to> \"stuff\")\n\n'use strict';\n\nvar parseLinkLabel       = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle       = require('../helpers/parse_link_title');\nvar normalizeReference   = require('../helpers/normalize_reference');\n\n\nmodule.exports = function links(state, silent) {\n  var labelStart,\n      labelEnd,\n      label,\n      href,\n      title,\n      pos,\n      ref,\n      code,\n      isImage = false,\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (marker === 0x21/* ! */) {\n    isImage = true;\n    marker = state.src.charCodeAt(++start);\n  }\n\n  if (marker !== 0x5B/* [ */) { return false; }\n  if (state.level >= state.options.maxNesting) { return false; }\n\n  labelStart = start + 1;\n  labelEnd = parseLinkLabel(state, start);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    if (parseLinkDestination(state, pos)) {\n      href = state.linkContent;\n      pos = state.pos;\n    } else {\n      href = '';\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    if (pos < max && start !== pos && parseLinkTitle(state, pos)) {\n      title = state.linkContent;\n      pos = state.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (code !== 0x20 && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n\n    // do not allow nested reference links\n    if (state.linkLevel > 0) { return false; }\n\n    // [foo]  [bar]\n    //      ^^ optional whitespace (can include newlines)\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (code !== 0x20 && code !== 0x0A) { break; }\n    }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = start - 1;\n      }\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) {\n      if (typeof label === 'undefined') {\n        pos = labelEnd + 1;\n      }\n      label = state.src.slice(labelStart, labelEnd);\n    }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    if (isImage) {\n      state.push({\n        type: 'image',\n        src: href,\n        title: title,\n        alt: state.src.substr(labelStart, labelEnd - labelStart),\n        level: state.level\n      });\n    } else {\n      state.push({\n        type: 'link_open',\n        href: href,\n        title: title,\n        level: state.level++\n      });\n      state.linkLevel++;\n      state.parser.tokenize(state);\n      state.linkLevel--;\n      state.push({ type: 'link_close', level: --state.level });\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n"]}