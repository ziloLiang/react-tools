{"version":3,"sources":["node_modules/core-js/modules/es6.array.slice.js"],"names":["$export","require","html","cof","toIndex","toLength","arraySlice","slice","P","F","call","begin","end","len","length","klass","undefined","start","upTo","size","cloned","Array","i","charAt"],"mappings":"AAAA;;AACA,IAAIA,UAAaC,QAAQ,WAAR,CAAjB;AAAA,IACIC,OAAaD,QAAQ,SAAR,CADjB;AAAA,IAEIE,MAAaF,QAAQ,QAAR,CAFjB;AAAA,IAGIG,UAAaH,QAAQ,aAAR,CAHjB;AAAA,IAIII,WAAaJ,QAAQ,cAAR,CAJjB;AAAA,IAKIK,aAAa,GAAGC,KALpB;;AAOA;AACAP,QAAQA,QAAQQ,CAAR,GAAYR,QAAQS,CAAR,GAAYR,QAAQ,UAAR,EAAoB,YAAU;AAC5D,MAAGC,IAAH,EAAQI,WAAWI,IAAX,CAAgBR,IAAhB;AACT,CAF+B,CAAhC,EAEI,OAFJ,EAEa;AACXK,SAAO,SAASA,KAAT,CAAeI,KAAf,EAAsBC,GAAtB,EAA0B;AAC/B,QAAIC,MAAQR,SAAS,KAAKS,MAAd,CAAZ;AAAA,QACIC,QAAQZ,IAAI,IAAJ,CADZ;AAEAS,UAAMA,QAAQI,SAAR,GAAoBH,GAApB,GAA0BD,GAAhC;AACA,QAAGG,SAAS,OAAZ,EAAoB,OAAOT,WAAWI,IAAX,CAAgB,IAAhB,EAAsBC,KAAtB,EAA6BC,GAA7B,CAAP;AACpB,QAAIK,QAASb,QAAQO,KAAR,EAAeE,GAAf,CAAb;AAAA,QACIK,OAASd,QAAQQ,GAAR,EAAaC,GAAb,CADb;AAAA,QAEIM,OAASd,SAASa,OAAOD,KAAhB,CAFb;AAAA,QAGIG,SAASC,MAAMF,IAAN,CAHb;AAAA,QAIIG,IAAS,CAJb;AAKA,WAAMA,IAAIH,IAAV,EAAgBG,GAAhB;AAAoBF,aAAOE,CAAP,IAAYP,SAAS,QAAT,GAC5B,KAAKQ,MAAL,CAAYN,QAAQK,CAApB,CAD4B,GAE5B,KAAKL,QAAQK,CAAb,CAFgB;AAApB,KAGA,OAAOF,MAAP;AACD;AAfU,CAFb","file":"es6.array.slice.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["'use strict';\nvar $export    = require('./_export')\n  , html       = require('./_html')\n  , cof        = require('./_cof')\n  , toIndex    = require('./_to-index')\n  , toLength   = require('./_to-length')\n  , arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function(){\n  if(html)arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end){\n    var len   = toLength(this.length)\n      , klass = cof(this);\n    end = end === undefined ? len : end;\n    if(klass == 'Array')return arraySlice.call(this, begin, end);\n    var start  = toIndex(begin, len)\n      , upTo   = toIndex(end, len)\n      , size   = toLength(upTo - start)\n      , cloned = Array(size)\n      , i      = 0;\n    for(; i < size; i++)cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});"]}