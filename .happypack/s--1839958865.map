{"version":3,"sources":["node_modules/react-highlight/node_modules/highlight.js/lib/languages/julia.js"],"names":["module","exports","hljs","KEYWORDS","keyword","literal","built_in","VARIABLE_NAME_RE","DEFAULT","lexemes","keywords","illegal","TYPE_ANNOTATION","className","begin","SUBTYPE","NUMBER","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","HASH_COMMENT_MODE"],"mappings":"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","file":"julia.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia (v0.3.0 and v0.4.1)\n  // itself through following scripts for each.\n\n  var KEYWORDS = {\n    // # keyword generator\n    // println(\"in\")\n    // for kw in Base.REPLCompletions.complete_keyword(\"\")\n    //     println(kw)\n    // end\n    keyword:\n      'in abstract baremodule begin bitstype break catch ccall const continue do else elseif end export ' +\n      'finally for function global if immutable import importall let local macro module quote return try type ' +\n      'typealias using while',\n\n    // # literal generator\n    // println(\"true\")\n    // println(\"false\")\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         s = symbol(name)\n    //         v = eval(s)\n    //         if !isa(v, Function) &&\n    //            !isa(v, DataType) &&\n    //            !isa(v, IntrinsicFunction) &&\n    //            !issubtype(typeof(v), Tuple) &&\n    //            !isa(v, Union) &&\n    //            !isa(v, Module) &&\n    //            !isa(v, TypeConstructor) &&\n    //            !isa(v, TypeVar) &&\n    //            !isa(v, Colon)\n    //             println(name)\n    //         end\n    //     end\n    // end\n    literal:\n      // v0.3\n      'true false ARGS CPU_CORES C_NULL DL_LOAD_PATH DevNull ENDIAN_BOM ENV I|0 Inf Inf16 Inf32 ' +\n      'InsertionSort JULIA_HOME LOAD_PATH MS_ASYNC MS_INVALIDATE MS_SYNC MergeSort NaN NaN16 NaN32 OS_NAME QuickSort ' +\n      'RTLD_DEEPBIND RTLD_FIRST RTLD_GLOBAL RTLD_LAZY RTLD_LOCAL RTLD_NODELETE RTLD_NOLOAD RTLD_NOW RoundDown ' +\n      'RoundFromZero RoundNearest RoundToZero RoundUp STDERR STDIN STDOUT VERSION WORD_SIZE catalan cglobal e|0 eu|0 ' +\n      'eulergamma golden im nothing pi γ π φ ' +\n      // v0.4 (diff)\n      'Inf64 NaN64 RoundNearestTiesAway RoundNearestTiesUp ',\n\n    // # built_in generator:\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         v = eval(symbol(name))\n    //         if isa(v, DataType) || isa(v, TypeConstructor) || isa(v, TypeVar)\n    //             println(name)\n    //         end\n    //     end\n    // end\n    built_in:\n      // v0.3\n      'ANY ASCIIString AbstractArray AbstractRNG AbstractSparseArray Any ArgumentError Array Associative Base64Pipe ' +\n      'Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError Box CFILE Cchar Cdouble Cfloat Char ' +\n      'CharString Cint Clong Clonglong ClusterManager Cmd Coff_t Colon Complex Complex128 Complex32 Complex64 ' +\n      'Condition Cptrdiff_t Cshort Csize_t Cssize_t Cuchar Cuint Culong Culonglong Cushort Cwchar_t DArray DataType ' +\n      'DenseArray Diagonal Dict DimensionMismatch DirectIndexString Display DivideError DomainError EOFError ' +\n      'EachLine Enumerate ErrorException Exception Expr Factorization FileMonitor FileOffset Filter Float16 Float32 ' +\n      'Float64 FloatRange FloatingPoint Function GetfieldNode GotoNode Hermitian IO IOBuffer IOStream IPv4 IPv6 ' +\n      'InexactError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException IntrinsicFunction KeyError ' +\n      'LabelNode LambdaStaticData LineNumberNode LoadError LocalProcess MIME MathConst MemoryError MersenneTwister ' +\n      'Method MethodError MethodTable Module NTuple NewvarNode Nothing Number ObjectIdDict OrdinalRange ' +\n      'OverflowError ParseError PollingFileWatcher ProcessExitedException ProcessGroup Ptr QuoteNode Range Range1 ' +\n      'Ranges Rational RawFD Real Regex RegexMatch RemoteRef RepString RevString RopeString RoundingMode Set ' +\n      'SharedArray Signed SparseMatrixCSC StackOverflowError Stat StatStruct StepRange String SubArray SubString ' +\n      'SymTridiagonal Symbol SymbolNode Symmetric SystemError Task TextDisplay Timer TmStruct TopNode Triangular ' +\n      'Tridiagonal Type TypeConstructor TypeError TypeName TypeVar UTF16String UTF32String UTF8String UdpSocket ' +\n      'Uint Uint128 Uint16 Uint32 Uint64 Uint8 UndefRefError UndefVarError UniformScaling UnionType UnitRange ' +\n      'Unsigned Vararg VersionNumber WString WeakKeyDict WeakRef Woodbury Zip ' +\n      // v0.4 (diff)\n      'AbstractChannel AbstractFloat AbstractString AssertionError Base64DecodePipe Base64EncodePipe BufferStream ' +\n      'CapturedException CartesianIndex CartesianRange Channel Cintmax_t CompositeException Cstring Cuintmax_t ' +\n      'Cwstring Date DateTime Dims Enum GenSym GlobalRef HTML InitError InvalidStateException Irrational LinSpace ' +\n      'LowerTriangular NullException Nullable OutOfMemoryError Pair PartialQuickSort Pipe RandomDevice ' +\n      'ReadOnlyMemoryError ReentrantLock Ref RemoteException SegmentationFault SerializationState SimpleVector ' +\n      'TCPSocket Text Tuple UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UnicodeError Union UpperTriangular ' +\n      'Val Void WorkerConfig AbstractMatrix AbstractSparseMatrix AbstractSparseVector AbstractVecOrMat AbstractVector ' +\n      'DenseMatrix DenseVecOrMat DenseVector Matrix SharedMatrix SharedVector StridedArray StridedMatrix ' +\n      'StridedVecOrMat StridedVector VecOrMat Vector '\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // placeholder for recursive self-reference\n  var DEFAULT = { lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\\// };\n\n  var TYPE_ANNOTATION = {\n    className: 'type',\n    begin: /::/\n  };\n\n  var SUBTYPE = {\n    className: 'type',\n    begin: /<:/\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\n      { begin: /\\w*\"/, end: /\"\\w*/ }\n    ]\n  };\n\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`', end: '`'\n  };\n\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    variants: [\n      { begin: '#=', end: '=#', relevance: 10 },\n      { begin: '#', end: '$' }\n    ]\n  };\n\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    TYPE_ANNOTATION,\n    SUBTYPE,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n};"]}