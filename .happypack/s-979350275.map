{"version":3,"sources":["node_modules/remarkable/lib/rules_core/smartquotes.js"],"names":["QUOTE_TEST_RE","QUOTE_RE","PUNCT_RE","APOSTROPHE","isLetter","str","pos","length","test","replaceAt","index","ch","substr","module","exports","smartquotes","state","i","token","text","t","max","thisLevel","lastSpace","nextSpace","item","canOpen","canClose","j","isSingle","blkIdx","tokens","stack","options","typographer","type","children","level","content","OUTER","lastIndex","exec","single","quotes","push"],"mappings":"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","file":"smartquotes.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar PUNCT_RE = /[-\\s()\\[\\]]/;\nvar APOSTROPHE = 'â€™';\n\n// This function returns true if the character at `pos`\n// could be inside a word.\nfunction isLetter(str, pos) {\n  if (pos < 0 || pos >= str.length) { return false; }\n  return !PUNCT_RE.test(str[pos]);\n}\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var i, token, text, t, pos, max, thisLevel, lastSpace, nextSpace, item,\n      canOpen, canClose, j, isSingle, blkIdx, tokens,\n      stack;\n\n  if (!state.options.typographer) { return; }\n\n  stack = [];\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    tokens = state.tokens[blkIdx].children;\n    stack.length = 0;\n\n    for (i = 0; i < tokens.length; i++) {\n      token = tokens[i];\n\n      if (token.type !== 'text' || QUOTE_TEST_RE.test(token.text)) { continue; }\n\n      thisLevel = tokens[i].level;\n\n      for (j = stack.length - 1; j >= 0; j--) {\n        if (stack[j].level <= thisLevel) { break; }\n      }\n      stack.length = j + 1;\n\n      text = token.content;\n      pos = 0;\n      max = text.length;\n\n      /*eslint no-labels:0,block-scoped-var:0*/\n      OUTER:\n      while (pos < max) {\n        QUOTE_RE.lastIndex = pos;\n        t = QUOTE_RE.exec(text);\n        if (!t) { break; }\n\n        lastSpace = !isLetter(text, t.index - 1);\n        pos = t.index + 1;\n        isSingle = (t[0] === \"'\");\n        nextSpace = !isLetter(text, pos);\n\n        if (!nextSpace && !lastSpace) {\n          // middle of word\n          if (isSingle) {\n            token.content = replaceAt(token.content, t.index, APOSTROPHE);\n          }\n          continue;\n        }\n\n        canOpen = !nextSpace;\n        canClose = !lastSpace;\n\n        if (canClose) {\n          // this could be a closing quote, rewind the stack to get a match\n          for (j = stack.length - 1; j >= 0; j--) {\n            item = stack[j];\n            if (stack[j].level < thisLevel) { break; }\n            if (item.single === isSingle && stack[j].level === thisLevel) {\n              item = stack[j];\n              if (isSingle) {\n                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[2]);\n                token.content = replaceAt(token.content, t.index, state.options.quotes[3]);\n              } else {\n                tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, state.options.quotes[0]);\n                token.content = replaceAt(token.content, t.index, state.options.quotes[1]);\n              }\n              stack.length = j;\n              continue OUTER;\n            }\n          }\n        }\n\n        if (canOpen) {\n          stack.push({\n            token: i,\n            pos: t.index,\n            single: isSingle,\n            level: thisLevel\n          });\n        } else if (canClose && isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n      }\n    }\n  }\n};\n"]}