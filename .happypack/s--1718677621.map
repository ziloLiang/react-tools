{"version":3,"sources":["node_modules/babel-polyfill/node_modules/core-js/modules/es7.string.match-all.js"],"names":["$export","require","defined","toLength","isRegExp","getFlags","RegExpProto","RegExp","prototype","$RegExpStringIterator","regexp","string","_r","_s","next","match","exec","value","done","P","matchAll","TypeError","S","String","flags","call","rx","source","indexOf","lastIndex"],"mappings":"AAAA;AACA;;AACA,IAAIA,UAAcC,QAAQ,WAAR,CAAlB;AAAA,IACIC,UAAcD,QAAQ,YAAR,CADlB;AAAA,IAEIE,WAAcF,QAAQ,cAAR,CAFlB;AAAA,IAGIG,WAAcH,QAAQ,cAAR,CAHlB;AAAA,IAIII,WAAcJ,QAAQ,UAAR,CAJlB;AAAA,IAKIK,cAAcC,OAAOC,SALzB;;AAOA,IAAIC,wBAAwB,SAAxBA,qBAAwB,CAASC,MAAT,EAAiBC,MAAjB,EAAwB;AAClD,OAAKC,EAAL,GAAUF,MAAV;AACA,OAAKG,EAAL,GAAUF,MAAV;AACD,CAHD;;AAKAV,QAAQ,gBAAR,EAA0BQ,qBAA1B,EAAiD,eAAjD,EAAkE,SAASK,IAAT,GAAe;AAC/E,MAAIC,QAAQ,KAAKH,EAAL,CAAQI,IAAR,CAAa,KAAKH,EAAlB,CAAZ;AACA,SAAO,EAACI,OAAOF,KAAR,EAAeG,MAAMH,UAAU,IAA/B,EAAP;AACD,CAHD;;AAKAf,QAAQA,QAAQmB,CAAhB,EAAmB,QAAnB,EAA6B;AAC3BC,YAAU,SAASA,QAAT,CAAkBV,MAAlB,EAAyB;AACjCR,YAAQ,IAAR;AACA,QAAG,CAACE,SAASM,MAAT,CAAJ,EAAqB,MAAMW,UAAUX,SAAS,mBAAnB,CAAN;AACrB,QAAIY,IAAQC,OAAO,IAAP,CAAZ;AAAA,QACIC,QAAQ,WAAWlB,WAAX,GAAyBiB,OAAOb,OAAOc,KAAd,CAAzB,GAAgDnB,SAASoB,IAAT,CAAcf,MAAd,CAD5D;AAAA,QAEIgB,KAAQ,IAAInB,MAAJ,CAAWG,OAAOiB,MAAlB,EAA0B,CAACH,MAAMI,OAAN,CAAc,GAAd,CAAD,GAAsBJ,KAAtB,GAA8B,MAAMA,KAA9D,CAFZ;AAGAE,OAAGG,SAAH,GAAe1B,SAASO,OAAOmB,SAAhB,CAAf;AACA,WAAO,IAAIpB,qBAAJ,CAA0BiB,EAA1B,EAA8BJ,CAA9B,CAAP;AACD;AAT0B,CAA7B","file":"es7.string.match-all.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export     = require('./_export')\n  , defined     = require('./_defined')\n  , toLength    = require('./_to-length')\n  , isRegExp    = require('./_is-regexp')\n  , getFlags    = require('./_flags')\n  , RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function(regexp, string){\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){\n  var match = this._r.exec(this._s);\n  return {value: match, done: match === null};\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp){\n    defined(this);\n    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');\n    var S     = String(this)\n      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)\n      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});"]}