{"version":3,"sources":["node_modules/remarkable/lib/rules_inline/htmltag.js"],"names":["HTML_TAG_RE","require","isLetter","ch","lc","module","exports","htmltag","state","silent","match","max","pos","options","html","posMax","src","charCodeAt","slice","push","type","content","length","level"],"mappings":"AAAA;;AAEA;;AAGA,IAAIA,cAAcC,QAAQ,mBAAR,EAA6BD,WAA/C;;AAGA,SAASE,QAAT,CAAkBC,EAAlB,EAAsB;AACpB;AACA,MAAIC,KAAKD,KAAK,IAAd,CAFoB,CAEA;AACpB,SAAQC,MAAM,IAAP,CAAW,OAAX,IAAwBA,MAAM,IAA9B,CAAkC,OAAzC;AACD;;AAGDC,OAAOC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC/C,MAAIN,EAAJ;AAAA,MAAQO,KAAR;AAAA,MAAeC,GAAf;AAAA,MAAoBC,MAAMJ,MAAMI,GAAhC;;AAEA,MAAI,CAACJ,MAAMK,OAAN,CAAcC,IAAnB,EAAyB;AAAE,WAAO,KAAP;AAAe;;AAE1C;AACAH,QAAMH,MAAMO,MAAZ;AACA,MAAIP,MAAMQ,GAAN,CAAUC,UAAV,CAAqBL,GAArB,MAA8B,IAA9B,CAAkC,OAAlC,IACAA,MAAM,CAAN,IAAWD,GADf,EACoB;AAClB,WAAO,KAAP;AACD;;AAED;AACAR,OAAKK,MAAMQ,GAAN,CAAUC,UAAV,CAAqBL,MAAM,CAA3B,CAAL;AACA,MAAIT,OAAO,IAAP,CAAW,OAAX,IACAA,OAAO,IADP,CACW,OADX,IAEAA,OAAO,IAFP,CAEW,OAFX,IAGA,CAACD,SAASC,EAAT,CAHL,EAGmB;AACjB,WAAO,KAAP;AACD;;AAEDO,UAAQF,MAAMQ,GAAN,CAAUE,KAAV,CAAgBN,GAAhB,EAAqBF,KAArB,CAA2BV,WAA3B,CAAR;AACA,MAAI,CAACU,KAAL,EAAY;AAAE,WAAO,KAAP;AAAe;;AAE7B,MAAI,CAACD,MAAL,EAAa;AACXD,UAAMW,IAAN,CAAW;AACTC,YAAM,SADG;AAETC,eAASb,MAAMQ,GAAN,CAAUE,KAAV,CAAgBN,GAAhB,EAAqBA,MAAMF,MAAM,CAAN,EAASY,MAApC,CAFA;AAGTC,aAAOf,MAAMe;AAHJ,KAAX;AAKD;AACDf,QAAMI,GAAN,IAAaF,MAAM,CAAN,EAASY,MAAtB;AACA,SAAO,IAAP;AACD,CAjCD","file":"htmltag.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function htmltag(state, silent) {\n  var ch, match, max, pos = state.pos;\n\n  if (!state.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    state.push({\n      type: 'htmltag',\n      content: state.src.slice(pos, pos + match[0].length),\n      level: state.level\n    });\n  }\n  state.pos += match[0].length;\n  return true;\n};\n"]}