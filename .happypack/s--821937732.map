{"version":3,"sources":["node_modules/react-highlight/node_modules/highlight.js/lib/languages/ocaml.js"],"names":["module","exports","hljs","aliases","keywords","keyword","built_in","literal","illegal","lexemes","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,UAASC,IAAT,EAAe;AAC9B;AACA,SAAO;AACLC,aAAS,CAAC,IAAD,CADJ;AAELC,cAAU;AACRC,eACE,sEACA,4DADA,GAEA,sFAFA,GAGA,wEAHA,GAIA,oDAJA;AAKA;AACA,oBARM;AASRC;AACE;AACA;AACA;AACA,kCAbM;AAcRC,eACE;AAfM,KAFL;AAmBLC,aAAS,SAnBJ;AAoBLC,aAAS,cApBJ;AAqBLC,cAAU,CACR;AACEC,iBAAW,SADb;AAEEC,aAAO,wBAFT;AAGEC,iBAAW;AAHb,KADQ,EAMRX,KAAKY,OAAL,CACE,QADF,EAEE,QAFF,EAGE;AACEJ,gBAAU,CAAC,MAAD;AADZ,KAHF,CANQ,EAaR,EAAE;AACAC,iBAAW,QADb;AAEEC,aAAO;AACP;AAHF,KAbQ,EAkBR,EAAE;AACAD,iBAAW,MADb;AAEEC,aAAO;AAFT,KAlBQ,EAsBR,EAAE;AACAD,iBAAW,MADb;AAEEC,aAAO,kBAFT;AAGEC,iBAAW;AAHb,KAtBQ,EA2BR,EAAE;AACAD,aAAO,sBADT,EACiCC,WAAW;AAD5C,KA3BQ,EA8BRX,KAAKa,OAAL,CAAab,KAAKc,gBAAlB,EAAoC,EAACL,WAAW,QAAZ,EAAsBE,WAAW,CAAjC,EAApC,CA9BQ,EA+BRX,KAAKa,OAAL,CAAab,KAAKe,iBAAlB,EAAqC,EAACT,SAAS,IAAV,EAArC,CA/BQ,EAgCR;AACEG,iBAAW,QADb;AAEEC,aACE,kCACA,qBADA,GAEA,oBAFA,GAGA,wDANJ;AAOEC,iBAAW;AAPb,KAhCQ,EAyCR;AACED,aAAO,OADT,CACiB;AADjB,KAzCQ;AArBL,GAAP;AAmED,CArED","file":"ocaml.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = function(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n        'and as assert asr begin class constraint do done downto else end ' +\n        'exception external for fun function functor if in include ' +\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\n        'mod module mutable new object of open! open or private rec sig struct ' +\n        'then to try type val! val virtual when while with ' +\n        /* camlp4 */\n        'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n        /* (some) types in Pervasives */\n        'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  }\n};"]}