{"version":3,"sources":["node_modules/react-highlight/node_modules/highlight.js/lib/languages/ada.js"],"names":["module","exports","hljs","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin"],"mappings":"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","file":"ada.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};"]}