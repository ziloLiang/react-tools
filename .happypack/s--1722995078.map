{"version":3,"sources":["node_modules/remarkable/lib/rules_inline/backticks.js"],"names":["module","exports","backticks","state","silent","start","max","marker","matchStart","matchEnd","pos","ch","src","charCodeAt","posMax","slice","indexOf","length","push","type","content","replace","trim","block","level","pending"],"mappings":"AAAA;;AAEA;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AACjD,MAAIC,KAAJ;AAAA,MAAWC,GAAX;AAAA,MAAgBC,MAAhB;AAAA,MAAwBC,UAAxB;AAAA,MAAoCC,QAApC;AAAA,MACIC,MAAMP,MAAMO,GADhB;AAAA,MAEIC,KAAKR,MAAMS,GAAN,CAAUC,UAAV,CAAqBH,GAArB,CAFT;;AAIA,MAAIC,OAAO,IAAX,CAAe,OAAf,EAAwB;AAAE,aAAO,KAAP;AAAe;;AAEzCN,UAAQK,GAAR;AACAA;AACAJ,QAAMH,MAAMW,MAAZ;;AAEA,SAAOJ,MAAMJ,GAAN,IAAaH,MAAMS,GAAN,CAAUC,UAAV,CAAqBH,GAArB,MAA8B,IAAlD,CAAsD,OAAtD,EAA+D;AAAEA;AAAQ;;AAEzEH,WAASJ,MAAMS,GAAN,CAAUG,KAAV,CAAgBV,KAAhB,EAAuBK,GAAvB,CAAT;;AAEAF,eAAaC,WAAWC,GAAxB;;AAEA,SAAO,CAACF,aAAaL,MAAMS,GAAN,CAAUI,OAAV,CAAkB,GAAlB,EAAuBP,QAAvB,CAAd,MAAoD,CAAC,CAA5D,EAA+D;AAC7DA,eAAWD,aAAa,CAAxB;;AAEA,WAAOC,WAAWH,GAAX,IAAkBH,MAAMS,GAAN,CAAUC,UAAV,CAAqBJ,QAArB,MAAmC,IAA5D,CAAgE,OAAhE,EAAyE;AAAEA;AAAa;;AAExF,QAAIA,WAAWD,UAAX,KAA0BD,OAAOU,MAArC,EAA6C;AAC3C,UAAI,CAACb,MAAL,EAAa;AACXD,cAAMe,IAAN,CAAW;AACTC,gBAAM,MADG;AAETC,mBAASjB,MAAMS,GAAN,CAAUG,KAAV,CAAgBL,GAAhB,EAAqBF,UAArB,EACYa,OADZ,CACoB,SADpB,EAC+B,GAD/B,EAEYC,IAFZ,EAFA;AAKTC,iBAAO,KALE;AAMTC,iBAAOrB,MAAMqB;AANJ,SAAX;AAQD;AACDrB,YAAMO,GAAN,GAAYD,QAAZ;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACL,MAAL,EAAa;AAAED,UAAMsB,OAAN,IAAiBlB,MAAjB;AAA0B;AACzCJ,QAAMO,GAAN,IAAaH,OAAOU,MAApB;AACA,SAAO,IAAP;AACD,CAzCD","file":"backticks.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// Parse backticks\n\n'use strict';\n\nmodule.exports = function backticks(state, silent) {\n  var start, max, marker, matchStart, matchEnd,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        state.push({\n          type: 'code',\n          content: state.src.slice(pos, matchStart)\n                              .replace(/[ \\n]+/g, ' ')\n                              .trim(),\n          block: false,\n          level: state.level\n        });\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n"]}