{"version":3,"sources":["node_modules/core-js/modules/es6.regexp.split.js"],"names":["require","defined","SPLIT","$split","isRegExp","_split","$push","push","$SPLIT","LENGTH","LAST_INDEX","NPCG","exec","undefined","separator","limit","string","String","call","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","splitLimit","separatorCopy","RegExp","source","separator2","match","lastIndex","lastLength","i","index","slice","replace","arguments","apply","test","split","O","fn"],"mappings":"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","file":"es6.regexp.split.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["// @@split logic\nrequire('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){\n  'use strict';\n  var isRegExp   = require('./_is-regexp')\n    , _split     = $split\n    , $push      = [].push\n    , $SPLIT     = 'split'\n    , LENGTH     = 'length'\n    , LAST_INDEX = 'lastIndex';\n  if(\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ){\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function(separator, limit){\n      var string = String(this);\n      if(separator === undefined && limit === 0)return [];\n      // If `separator` is not a regex, use native split\n      if(!isRegExp(separator))return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while(match = separatorCopy.exec(string)){\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if(lastIndex > lastLastIndex){\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){\n            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;\n          });\n          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if(output[LENGTH] >= splitLimit)break;\n        }\n        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if(lastLastIndex === string[LENGTH]){\n        if(lastLength || !separatorCopy.test(''))output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){\n    $split = function(separator, limit){\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit){\n    var O  = defined(this)\n      , fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});"]}