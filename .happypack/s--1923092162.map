{"version":3,"sources":["node_modules/remarkable/node_modules/autolinker/dist/Autolinker.js"],"names":["root","factory","define","amd","exports","module","Autolinker","cfg","Util","assign","prototype","constructor","urls","email","twitter","newWindow","stripPrefix","truncate","undefined","className","htmlParser","matchParser","tagBuilder","link","textOrHtml","getHtmlParser","htmlNodes","parse","anchorTagStackCount","resultHtml","i","len","length","node","nodeType","getType","nodeText","getText","getTagName","isClosing","Math","max","push","linkifiedStr","linkifyStr","join","str","getMatchParser","replace","createMatchReturnVal","match","replaceFnResult","replaceFn","call","getMatchedText","HtmlTag","toString","getTagBuilder","anchorTag","build","HtmlParser","MatchParser","AnchorTagBuilder","options","autolinker","abstractMethod","dest","src","prop","hasOwnProperty","extend","superclass","protoProps","superclassProto","F","subclass","apply","arguments","subclassProto","ellipsis","truncateLen","ellipsisChars","substring","indexOf","arr","element","Array","splitAndCapture","splitRegex","global","Error","result","lastIdx","exec","index","Object","whitespaceRegex","innerHtml","innerHTML","setTagName","tagName","setAttr","attrName","attrValue","tagAttrs","getAttrs","getAttr","setAttrs","attrs","setClass","cssClass","addClass","classAttr","getClass","classes","split","newClasses","newClass","shift","removeClass","removeClasses","idx","splice","hasClass","setInnerHtml","html","getInnerHtml","attrsStr","buildAttrsStr","attrsArr","tag","createAttrs","getAnchorHref","processAnchorText","getAnchorText","matchType","anchorHref","createCssClass","anchorText","doTruncate","Number","POSITIVE_INFINITY","htmlRegex","tagNameRegex","attrNameRegex","attrValueRegex","nameEqualsValueRegex","source","RegExp","htmlCharacterEntitiesRegex","currentResult","lastIndex","textAndEntityNodes","nodes","tagText","isClosingTag","inBetweenTagsText","parseTextAndEntityNodes","createElementNode","text","textAndEntityTokens","textToken","entityToken","createTextNode","createEntityNode","ElementNode","toLowerCase","closing","EntityNode","TextNode","HtmlNode","matcherRegex","twitterRegex","emailRegex","protocolRegex","wwwRegex","domainNameRegex","tldRegex","urlSuffixRegex","charBeforeProtocolRelMatchRegex","matchValidator","MatchValidator","contextObj","me","matchStr","$1","$2","$3","$4","$5","$6","$7","$8","matchDescObj","processCandidateMatch","replaceStr","prefixStr","suffixStr","twitterMatch","twitterHandlePrefixWhitespaceChar","twitterHandle","emailAddressMatch","urlMatch","protocolUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","protocolRelativeMatch","isValidMatch","matchHasUnbalancedClosingParen","substr","Email","matchedText","slice","Twitter","charBeforeMatch","Url","url","lastChar","charAt","openParensMatch","closeParensMatch","numOpenParens","numCloseParens","invalidProtocolRelMatchRegex","hasFullProtocolRegex","uriSchemeRegex","hasWordCharAfterProtocolRegex","isValidUriScheme","urlMatchDoesNotHaveProtocolOrDot","urlMatchDoesNotHaveAtLeastOneWordChar","isInvalidProtocolRelativeMatch","uriSchemeMatch","uriScheme","test","Match","getEmail","getTwitterHandle","urlPrefixRegex","protocolRelativeRegex","protocolPrepended","getUrl","stripProtocolRelativePrefix","stripUrlPrefix","removeTrailingSlash"],"mappings":"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","file":"Autolinker.js","sourceRoot":"/Users/liangdong06/work/react-tools","sourcesContent":["(function (root, factory) {\n  if (root && typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['Autolinker'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Autolinker'] = factory();\n  }\n}(this, function () {\n\n/*!\n * Autolinker.js\n * 0.15.3\n *\n * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT Licensed. http://www.opensource.org/licenses/mit-license.php\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n/**\n * @class Autolinker\n * @extends Object\n *\n * Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n *\n * Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which\n * will configure how the {@link #link link()} method will process the links.\n *\n * For example:\n *\n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * The {@link #static-link static link()} method may also be used to inline options into a single call, which may\n * be more convenient for one-off uses. For example:\n *\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * ## Custom Replacements of Links\n *\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn} may be provided to fully customize\n * the output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *\n *                         return tag;\n *\n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *\n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *\n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *\n *                 case 'twitter' :\n *                     var twitterHandle = match.getTwitterHandle();\n *                     console.log( twitterHandle );\n *\n *                     return '<a href=\"http://newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\n *             }\n *         }\n *     } );\n *\n *\n * The function may return the following values:\n *\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\n *   the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.\n *\n * @constructor\n * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).\n */\nvar Autolinker = function( cfg ) {\n\tAutolinker.Util.assign( this, cfg );  // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.\n};\n\n\nAutolinker.prototype = {\n\tconstructor : Autolinker,  // fix constructor property\n\n\t/**\n\t * @cfg {Boolean} urls\n\t *\n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\n\t/**\n\t * @cfg {Boolean} email\n\t *\n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\n\t/**\n\t * @cfg {Boolean} twitter\n\t *\n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\n\t/**\n\t * @cfg {Boolean} newWindow\n\t *\n\t * `true` if the links should open in a new window, `false` otherwise.\n\t */\n\tnewWindow : true,\n\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t *\n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text,\n\t * `false` otherwise.\n\t */\n\tstripPrefix : true,\n\n\t/**\n\t * @cfg {Number} truncate\n\t *\n\t * A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of\n\t * a link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by\n\t * adding a two period ellipsis ('..') to the end of the string.\n\t *\n\t * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\n\t * something like this: 'yahoo.com/some/long/pat..'\n\t */\n\ttruncate : undefined,\n\n\t/**\n\t * @cfg {String} className\n\t *\n\t * A CSS class name to add to the generated links. This class will be added to all links, as well as this class\n\t * plus url/email/twitter suffixes for styling url/email/twitter links differently.\n\t *\n\t * For example, if this config is provided as \"myLink\", then:\n\t *\n\t * - URL links will have the CSS classes: \"myLink myLink-url\"\n\t * - Email links will have the CSS classes: \"myLink myLink-email\", and\n\t * - Twitter links will have the CSS classes: \"myLink myLink-twitter\"\n\t */\n\tclassName : \"\",\n\n\t/**\n\t * @cfg {Function} replaceFn\n\t *\n\t * A function to individually process each URL/Email/Twitter match found in the input string.\n\t *\n\t * See the class's description for usage.\n\t *\n\t * This function is called with the following parameters:\n\t *\n\t * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such\n\t *   as the instance's {@link #getTagBuilder tag builder}).\n\t * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the\n\t *   {@link Autolinker.match.Url URL}/{@link Autolinker.match.Email email}/{@link Autolinker.match.Twitter Twitter}\n\t *   match that the `replaceFn` is currently processing.\n\t */\n\n\n\t/**\n\t * @private\n\t * @property {Autolinker.htmlParser.HtmlParser} htmlParser\n\t *\n\t * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\n\t * in the {@link #getHtmlParser} method.\n\t */\n\thtmlParser : undefined,\n\n\t/**\n\t * @private\n\t * @property {Autolinker.matchParser.MatchParser} matchParser\n\t *\n\t * The MatchParser instance used to find URL/email/Twitter matches in the text nodes of an input string passed to\n\t * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.\n\t */\n\tmatchParser : undefined,\n\n\t/**\n\t * @private\n\t * @property {Autolinker.AnchorTagBuilder} tagBuilder\n\t *\n\t * The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated\n\t * in the {@link #getTagBuilder} method.\n\t */\n\ttagBuilder : undefined,\n\n\n\t/**\n\t * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML.\n\t * Does not link URLs found within HTML tags.\n\t *\n\t * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n\t * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n\t *\n\t * This method finds the text around any HTML elements in the input `textOrHtml`, which will be the text that is processed.\n\t * Any original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.\n\t *\n\t * @param {String} textOrHtml The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if\n\t *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n\t * @return {String} The HTML, with URLs/emails/Twitter handles automatically linked.\n\t */\n\tlink : function( textOrHtml ) {\n\t\tvar htmlParser = this.getHtmlParser(),\n\t\t    htmlNodes = htmlParser.parse( textOrHtml ),\n\t\t    anchorTagStackCount = 0,  // used to only process text around anchor tags, and any inner text/html they may have\n\t\t    resultHtml = [];\n\n\t\tfor( var i = 0, len = htmlNodes.length; i < len; i++ ) {\n\t\t\tvar node = htmlNodes[ i ],\n\t\t\t    nodeType = node.getType(),\n\t\t\t    nodeText = node.getText();\n\n\t\t\tif( nodeType === 'element' ) {\n\t\t\t\t// Process HTML nodes in the input `textOrHtml`\n\t\t\t\tif( node.getTagName() === 'a' ) {\n\t\t\t\t\tif( !node.isClosing() ) {  // it's the start <a> tag\n\t\t\t\t\t\tanchorTagStackCount++;\n\t\t\t\t\t} else {   // it's the end </a> tag\n\t\t\t\t\t\tanchorTagStackCount = Math.max( anchorTagStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresultHtml.push( nodeText );  // now add the text of the tag itself verbatim\n\n\t\t\t} else if( nodeType === 'entity' ) {\n\t\t\t\tresultHtml.push( nodeText );  // append HTML entity nodes (such as '&nbsp;') verbatim\n\n\t\t\t} else {\n\t\t\t\t// Process text nodes in the input `textOrHtml`\n\t\t\t\tif( anchorTagStackCount === 0 ) {\n\t\t\t\t\t// If we're not within an <a> tag, process the text node to linkify\n\t\t\t\t\tvar linkifiedStr = this.linkifyStr( nodeText );\n\t\t\t\t\tresultHtml.push( linkifiedStr );\n\n\t\t\t\t} else {\n\t\t\t\t\t// `text` is within an <a> tag, simply append the text - we do not want to autolink anything\n\t\t\t\t\t// already within an <a>...</a> tag\n\t\t\t\t\tresultHtml.push( nodeText );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn resultHtml.join( \"\" );\n\t},\n\n\n\t/**\n\t * Process the text that lies in between HTML tags, performing the anchor tag replacements for matched\n\t * URLs/emails/Twitter handles, and returns the string with the replacements made.\n\t *\n\t * This method does the actual wrapping of URLs/emails/Twitter handles with anchor tags.\n\t *\n\t * @private\n\t * @param {String} str The string of text to auto-link.\n\t * @return {String} The text with anchor tags auto-filled.\n\t */\n\tlinkifyStr : function( str ) {\n\t\treturn this.getMatchParser().replace( str, this.createMatchReturnVal, this );\n\t},\n\n\n\t/**\n\t * Creates the return string value for a given match in the input string, for the {@link #processTextNode} method.\n\t *\n\t * This method handles the {@link #replaceFn}, if one was provided.\n\t *\n\t * @private\n\t * @param {Autolinker.match.Match} match The Match object that represents the match.\n\t * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but\n\t *   may be the `matchStr` itself if the match is not to be replaced.\n\t */\n\tcreateMatchReturnVal : function( match ) {\n\t\t// Handle a custom `replaceFn` being provided\n\t\tvar replaceFnResult;\n\t\tif( this.replaceFn ) {\n\t\t\treplaceFnResult = this.replaceFn.call( this, this, match );  // Autolinker instance is the context, and the first arg\n\t\t}\n\n\t\tif( typeof replaceFnResult === 'string' ) {\n\t\t\treturn replaceFnResult;  // `replaceFn` returned a string, use that\n\n\t\t} else if( replaceFnResult === false ) {\n\t\t\treturn match.getMatchedText();  // no replacement for the match\n\n\t\t} else if( replaceFnResult instanceof Autolinker.HtmlTag ) {\n\t\t\treturn replaceFnResult.toString();\n\n\t\t} else {  // replaceFnResult === true, or no/unknown return value from function\n\t\t\t// Perform Autolinker's default anchor tag generation\n\t\t\tvar tagBuilder = this.getTagBuilder(),\n\t\t\t    anchorTag = tagBuilder.build( match );  // returns an Autolinker.HtmlTag instance\n\n\t\t\treturn anchorTag.toString();\n\t\t}\n\t},\n\n\n\t/**\n\t * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.\n\t *\n\t * @protected\n\t * @return {Autolinker.htmlParser.HtmlParser}\n\t */\n\tgetHtmlParser : function() {\n\t\tvar htmlParser = this.htmlParser;\n\n\t\tif( !htmlParser ) {\n\t\t\thtmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\n\t\t}\n\n\t\treturn htmlParser;\n\t},\n\n\n\t/**\n\t * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.\n\t *\n\t * @protected\n\t * @return {Autolinker.matchParser.MatchParser}\n\t */\n\tgetMatchParser : function() {\n\t\tvar matchParser = this.matchParser;\n\n\t\tif( !matchParser ) {\n\t\t\tmatchParser = this.matchParser = new Autolinker.matchParser.MatchParser( {\n\t\t\t\turls : this.urls,\n\t\t\t\temail : this.email,\n\t\t\t\ttwitter : this.twitter,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\n\t\treturn matchParser;\n\t},\n\n\n\t/**\n\t * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\n\t * if it does not yet exist.\n\t *\n\t * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that\n\t * Autolinker would normally generate, and then allow for modifications before returning it. For example:\n\t *\n\t *     var html = Autolinker.link( \"Test google.com\", {\n\t *         replaceFn : function( autolinker, match ) {\n\t *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n\t *             tag.setAttr( 'rel', 'nofollow' );\n\t *\n\t *             return tag;\n\t *         }\n\t *     } );\n\t *\n\t *     // generated html:\n\t *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n\t *\n\t * @return {Autolinker.AnchorTagBuilder}\n\t */\n\tgetTagBuilder : function() {\n\t\tvar tagBuilder = this.tagBuilder;\n\n\t\tif( !tagBuilder ) {\n\t\t\ttagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder( {\n\t\t\t\tnewWindow   : this.newWindow,\n\t\t\t\ttruncate    : this.truncate,\n\t\t\t\tclassName   : this.className\n\t\t\t} );\n\t\t}\n\n\t\treturn tagBuilder;\n\t}\n\n};\n\n\n/**\n * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML.\n * Does not link URLs found within HTML tags.\n *\n * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n *\n * Example:\n *\n *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n *\n * @static\n * @param {String} textOrHtml The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if\n *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n * @param {Object} [options] Any of the configuration options for the Autolinker class, specified in an Object (map).\n *   See the class description for an example call.\n * @return {String} The HTML text, with URLs automatically linked\n */\nAutolinker.link = function( textOrHtml, options ) {\n\tvar autolinker = new Autolinker( options );\n\treturn autolinker.link( textOrHtml );\n};\n\n\n// Autolinker Namespaces\nAutolinker.match = {};\nAutolinker.htmlParser = {};\nAutolinker.matchParser = {};\n/*global Autolinker */\n/*jshint eqnull:true, boss:true */\n/**\n * @class Autolinker.Util\n * @singleton\n *\n * A few utility methods for Autolinker.\n */\nAutolinker.Util = {\n\n\t/**\n\t * @property {Function} abstractMethod\n\t *\n\t * A function object which represents an abstract method.\n\t */\n\tabstractMethod : function() { throw \"abstract\"; },\n\n\n\t/**\n\t * Assigns (shallow copies) the properties of `src` onto `dest`.\n\t *\n\t * @param {Object} dest The destination object.\n\t * @param {Object} src The source object.\n\t * @return {Object} The destination object (`dest`)\n\t */\n\tassign : function( dest, src ) {\n\t\tfor( var prop in src ) {\n\t\t\tif( src.hasOwnProperty( prop ) ) {\n\t\t\t\tdest[ prop ] = src[ prop ];\n\t\t\t}\n\t\t}\n\n\t\treturn dest;\n\t},\n\n\n\t/**\n\t * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\n\t *\n\t * @param {Function} superclass The constructor function for the superclass.\n\t * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\n\t *   special property `constructor`, which will be used as the new subclass's constructor function.\n\t * @return {Function} The new subclass function.\n\t */\n\textend : function( superclass, protoProps ) {\n\t\tvar superclassProto = superclass.prototype;\n\n\t\tvar F = function() {};\n\t\tF.prototype = superclassProto;\n\n\t\tvar subclass;\n\t\tif( protoProps.hasOwnProperty( 'constructor' ) ) {\n\t\t\tsubclass = protoProps.constructor;\n\t\t} else {\n\t\t\tsubclass = function() { superclassProto.constructor.apply( this, arguments ); };\n\t\t}\n\n\t\tvar subclassProto = subclass.prototype = new F();  // set up prototype chain\n\t\tsubclassProto.constructor = subclass;  // fix constructor property\n\t\tsubclassProto.superclass = superclassProto;\n\n\t\tdelete protoProps.constructor;  // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\n\t\tAutolinker.Util.assign( subclassProto, protoProps );\n\n\t\treturn subclass;\n\t},\n\n\n\t/**\n\t * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n\t * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n\t * `len`, the string will be returned unchanged.\n\t *\n\t * @param {String} str The string to truncate and add an ellipsis to.\n\t * @param {Number} truncateLen The length to truncate the string at.\n\t * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`\n\t *   when truncated. Defaults to '..'\n\t */\n\tellipsis : function( str, truncateLen, ellipsisChars ) {\n\t\tif( str.length > truncateLen ) {\n\t\t\tellipsisChars = ( ellipsisChars == null ) ? '..' : ellipsisChars;\n\t\t\tstr = str.substring( 0, truncateLen - ellipsisChars.length ) + ellipsisChars;\n\t\t}\n\t\treturn str;\n\t},\n\n\n\t/**\n\t * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n\t *\n\t * @param {Array} arr The array to find an element of.\n\t * @param {*} element The element to find in the array, and return the index of.\n\t * @return {Number} The index of the `element`, or -1 if it was not found.\n\t */\n\tindexOf : function( arr, element ) {\n\t\tif( Array.prototype.indexOf ) {\n\t\t\treturn arr.indexOf( element );\n\n\t\t} else {\n\t\t\tfor( var i = 0, len = arr.length; i < len; i++ ) {\n\t\t\t\tif( arr[ i ] === element ) return i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t},\n\n\n\n\t/**\n\t * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n\t * with a regular expression that contains capturing parenthesis.\n\t *\n\t * For example:\n\t *\n\t *     // Modern browsers:\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n\t *\n\t *     // Old IE (including IE8):\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n\t *\n\t * This method emulates the functionality of modern browsers for the old IE case.\n\t *\n\t * @param {String} str The string to split.\n\t * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n\t *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n\t *   description of this method.\n\t *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n\t *   Note #2: for simplicity's sake, the regular expression does not need\n\t *   to contain capturing parenthesis - it will be assumed that any match has them.\n\t * @return {String[]} The split array of strings, with the splitting character(s) included.\n\t */\n\tsplitAndCapture : function( str, splitRegex ) {\n\t\tif( !splitRegex.global ) throw new Error( \"`splitRegex` must have the 'g' flag set\" );\n\n\t\tvar result = [],\n\t\t    lastIdx = 0,\n\t\t    match;\n\n\t\twhile( match = splitRegex.exec( str ) ) {\n\t\t\tresult.push( str.substring( lastIdx, match.index ) );\n\t\t\tresult.push( match[ 0 ] );  // push the splitting char(s)\n\n\t\t\tlastIdx = match.index + match[ 0 ].length;\n\t\t}\n\t\tresult.push( str.substring( lastIdx ) );\n\n\t\treturn result;\n\t}\n\n};\n/*global Autolinker */\n/*jshint boss:true */\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n *\n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n *\n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n *\n * ## Examples\n *\n * Example instantiation:\n *\n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *\n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *\n * Using mutator methods (which may be used in combination with instantiation config properties):\n *\n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *\n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *\n *\n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *\n *\n * ## Example use with a new tag for the replacement\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nAutolinker.HtmlTag = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @cfg {String} tagName\n\t *\n\t * The tag name. Ex: 'a', 'button', etc.\n\t *\n\t * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toString}\n\t * is executed.\n\t */\n\n\t/**\n\t * @cfg {Object.<String, String>} attrs\n\t *\n\t * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n\t * values are the attribute values.\n\t */\n\n\t/**\n\t * @cfg {String} innerHtml\n\t *\n\t * The inner HTML for the tag.\n\t *\n\t * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym\n\t * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\n\t * if you prefer, but this one is recommended.\n\t */\n\n\t/**\n\t * @cfg {String} innerHTML\n\t *\n\t * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\n\t * for acronym names.\n\t */\n\n\n\t/**\n\t * @protected\n\t * @property {RegExp} whitespaceRegex\n\t *\n\t * Regular expression used to match whitespace in a string of CSS classes.\n\t */\n\twhitespaceRegex : /\\s+/,\n\n\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\n\t\tthis.innerHtml = this.innerHtml || this.innerHTML;  // accept either the camelCased form or the fully capitalized acronym\n\t},\n\n\n\t/**\n\t * Sets the tag name that will be used to generate the tag with.\n\t *\n\t * @param {String} tagName\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetTagName : function( tagName ) {\n\t\tthis.tagName = tagName;\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Retrieves the tag name.\n\t *\n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName || \"\";\n\t},\n\n\n\t/**\n\t * Sets an attribute on the HtmlTag.\n\t *\n\t * @param {String} attrName The attribute name to set.\n\t * @param {String} attrValue The attribute value to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttr : function( attrName, attrValue ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\ttagAttrs[ attrName ] = attrValue;\n\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n\t *\n\t * @param {String} name The attribute name to retrieve.\n\t * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n\t */\n\tgetAttr : function( attrName ) {\n\t\treturn this.getAttrs()[ attrName ];\n\t},\n\n\n\t/**\n\t * Sets one or more attributes on the HtmlTag.\n\t *\n\t * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttrs : function( attrs ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\tAutolinker.Util.assign( tagAttrs, attrs );\n\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Retrieves the attributes Object (map) for the HtmlTag.\n\t *\n\t * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n\t */\n\tgetAttrs : function() {\n\t\treturn this.attrs || ( this.attrs = {} );\n\t},\n\n\n\t/**\n\t * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetClass : function( cssClass ) {\n\t\treturn this.setAttr( 'class', cssClass );\n\t},\n\n\n\t/**\n\t * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to add.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\taddClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    newClasses = cssClass.split( whitespaceRegex ),\n\t\t    newClass;\n\n\t\twhile( newClass = newClasses.shift() ) {\n\t\t\tif( indexOf( classes, newClass ) === -1 ) {\n\t\t\t\tclasses.push( newClass );\n\t\t\t}\n\t\t}\n\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Convenience method to remove one or more CSS classes from the HtmlTag.\n\t *\n\t * @param {String} cssClass One or more space-separated CSS classes to remove.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tremoveClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    removeClasses = cssClass.split( whitespaceRegex ),\n\t\t    removeClass;\n\n\t\twhile( classes.length && ( removeClass = removeClasses.shift() ) ) {\n\t\t\tvar idx = indexOf( classes, removeClass );\n\t\t\tif( idx !== -1 ) {\n\t\t\t\tclasses.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n\t * there are multiple.\n\t *\n\t * @return {String}\n\t */\n\tgetClass : function() {\n\t\treturn this.getAttrs()[ 'class' ] || \"\";\n\t},\n\n\n\t/**\n\t * Convenience method to check if the tag has a CSS class or not.\n\t *\n\t * @param {String} cssClass The CSS class to check for.\n\t * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n\t */\n\thasClass : function( cssClass ) {\n\t\treturn ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;\n\t},\n\n\n\t/**\n\t * Sets the inner HTML for the tag.\n\t *\n\t * @param {String} html The inner HTML to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetInnerHtml : function( html ) {\n\t\tthis.innerHtml = html;\n\n\t\treturn this;\n\t},\n\n\n\t/**\n\t * Retrieves the inner HTML for the tag.\n\t *\n\t * @return {String}\n\t */\n\tgetInnerHtml : function() {\n\t\treturn this.innerHtml || \"\";\n\t},\n\n\n\t/**\n\t * Override of superclass method used to generate the HTML string for the tag.\n\t *\n\t * @return {String}\n\t */\n\ttoString : function() {\n\t\tvar tagName = this.getTagName(),\n\t\t    attrsStr = this.buildAttrsStr();\n\n\t\tattrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes\n\n\t\treturn [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( \"\" );\n\t},\n\n\n\t/**\n\t * Support method for {@link #toString}, returns the string space-separated key=\"value\" pairs, used to populate\n\t * the stringified HtmlTag.\n\t *\n\t * @protected\n\t * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n\t */\n\tbuildAttrsStr : function() {\n\t\tif( !this.attrs ) return \"\";  // no `attrs` Object (map) has been set, return empty string\n\n\t\tvar attrs = this.getAttrs(),\n\t\t    attrsArr = [];\n\n\t\tfor( var prop in attrs ) {\n\t\t\tif( attrs.hasOwnProperty( prop ) ) {\n\t\t\t\tattrsArr.push( prop + '=\"' + attrs[ prop ] + '\"' );\n\t\t\t}\n\t\t}\n\t\treturn attrsArr.join( \" \" );\n\t}\n\n} );\n/*global Autolinker */\n/*jshint sub:true */\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n *\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.\n *\n * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may\n * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances\n * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\nAutolinker.AnchorTagBuilder = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * @inheritdoc Autolinker#newWindow\n\t */\n\n\t/**\n\t * @cfg {Number} truncate\n\t * @inheritdoc Autolinker#truncate\n\t */\n\n\t/**\n\t * @cfg {String} className\n\t * @inheritdoc Autolinker#className\n\t */\n\n\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\n\t/**\n\t * Generates the actual anchor (&lt;a&gt;) tag to use in place of the matched URL/email/Twitter text,\n\t * via its `match` object.\n\t *\n\t * @param {Autolinker.match.Match} match The Match instance to generate an anchor tag from.\n\t * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n\t */\n\tbuild : function( match ) {\n\t\tvar tag = new Autolinker.HtmlTag( {\n\t\t\ttagName   : 'a',\n\t\t\tattrs     : this.createAttrs( match.getType(), match.getAnchorHref() ),\n\t\t\tinnerHtml : this.processAnchorText( match.getAnchorText() )\n\t\t} );\n\n\t\treturn tag;\n\t},\n\n\n\t/**\n\t * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;) tag being generated.\n\t *\n\t * @protected\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @param {String} href The href for the anchor tag.\n\t * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n\t */\n\tcreateAttrs : function( matchType, anchorHref ) {\n\t\tvar attrs = {\n\t\t\t'href' : anchorHref  // we'll always have the `href` attribute\n\t\t};\n\n\t\tvar cssClass = this.createCssClass( matchType );\n\t\tif( cssClass ) {\n\t\t\tattrs[ 'class' ] = cssClass;\n\t\t}\n\t\tif( this.newWindow ) {\n\t\t\tattrs[ 'target' ] = \"_blank\";\n\t\t}\n\n\t\treturn attrs;\n\t},\n\n\n\t/**\n\t * Creates the CSS class that will be used for a given anchor tag, based on the `matchType` and the {@link #className}\n\t * config.\n\t *\n\t * @private\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @return {String} The CSS class string for the link. Example return: \"myLink myLink-url\". If no {@link #className}\n\t *   was configured, returns an empty string.\n\t */\n\tcreateCssClass : function( matchType ) {\n\t\tvar className = this.className;\n\n\t\tif( !className )\n\t\t\treturn \"\";\n\t\telse\n\t\t\treturn className + \" \" + className + \"-\" + matchType;  // ex: \"myLink myLink-url\", \"myLink myLink-email\", or \"myLink myLink-twitter\"\n\t},\n\n\n\t/**\n\t * Processes the `anchorText` by truncating the text according to the {@link #truncate} config.\n\t *\n\t * @private\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The processed `anchorText`.\n\t */\n\tprocessAnchorText : function( anchorText ) {\n\t\tanchorText = this.doTruncate( anchorText );\n\n\t\treturn anchorText;\n\t},\n\n\n\t/**\n\t * Performs the truncation of the `anchorText`, if the `anchorText` is longer than the {@link #truncate} option.\n\t * Truncates the text to 2 characters fewer than the {@link #truncate} option, and adds \"..\" to the end.\n\t *\n\t * @private\n\t * @param {String} text The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The truncated anchor text.\n\t */\n\tdoTruncate : function( anchorText ) {\n\t\treturn Autolinker.Util.ellipsis( anchorText, this.truncate || Number.POSITIVE_INFINITY );\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.htmlParser.HtmlParser\n * @extends Object\n *\n * An HTML parser implementation which simply walks an HTML string and returns an array of\n * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\n *\n * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / \"walking\n * around\" HTML tags.\n */\nAutolinker.htmlParser.HtmlParser = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @private\n\t * @property {RegExp} htmlRegex\n\t *\n\t * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\n\t * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.\n\t *\n\t * Capturing groups:\n\t *\n\t * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\n\t * 2. If it is an end tag, this group will have the '/'.\n\t * 3. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)\n\t */\n\thtmlRegex : (function() {\n\t\tvar tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\n\t\t    attrNameRegex = /[^\\s\\0\"'>\\/=\\x01-\\x1F\\x7F]+/,   // the unicode range accounts for excluding control chars, and the delete char\n\t\t    attrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/, // double quoted, single quoted, or unquoted attribute values\n\t\t    nameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?';  // optional '=[value]'\n\n\t\treturn new RegExp( [\n\t\t\t// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\n\t\t\t'(?:',\n\t\t\t\t'<(!DOCTYPE)',  // *** Capturing Group 1 - If it's a doctype tag\n\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',  // one or more whitespace chars before an attribute\n\n\t\t\t\t\t\t// Either:\n\t\t\t\t\t\t// A. attr=\"value\", or\n\t\t\t\t\t\t// B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">)\n\t\t\t\t\t\t'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')',\n\t\t\t\t\t')*',\n\t\t\t\t'>',\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t// All other HTML tags (i.e. tags that are not <!DOCTYPE>)\n\t\t\t'(?:',\n\t\t\t\t'<(/)?',  // Beginning of a tag. Either '<' for a start tag, or '</' for an end tag.\n\t\t\t\t          // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\n\n\t\t\t\t\t// *** Capturing Group 3 - The tag name\n\t\t\t\t\t'(' + tagNameRegex.source + ')',\n\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',                // one or more whitespace chars before an attribute\n\t\t\t\t\t\tnameEqualsValueRegex,  // attr=\"value\" (with optional =\"value\" part)\n\t\t\t\t\t')*',\n\n\t\t\t\t\t'\\\\s*/?',  // any trailing spaces and optional '/' before the closing '>'\n\t\t\t\t'>',\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\n\t/**\n\t * @private\n\t * @property {RegExp} htmlCharacterEntitiesRegex\n\t *\n\t * The regular expression that matches common HTML character entities.\n\t *\n\t * Ignoring &amp; as it could be part of a query string -- handling it separately.\n\t */\n\thtmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\n\n\n\t/**\n\t * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes} to represent\n\t * the HTML structure of the input string.\n\t *\n\t * @param {String} html The HTML to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]}\n\t */\n\tparse : function( html ) {\n\t\tvar htmlRegex = this.htmlRegex,\n\t\t    currentResult,\n\t\t    lastIndex = 0,\n\t\t    textAndEntityNodes,\n\t\t    nodes = [];  // will be the result of the method\n\n\t\twhile( ( currentResult = htmlRegex.exec( html ) ) !== null ) {\n\t\t\tvar tagText = currentResult[ 0 ],\n\t\t\t    tagName = currentResult[ 1 ] || currentResult[ 3 ],  // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\")\n\t\t\t    isClosingTag = !!currentResult[ 2 ],\n\t\t\t    inBetweenTagsText = html.substring( lastIndex, currentResult.index );\n\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( inBetweenTagsText ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( inBetweenTagsText );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\n\t\t\t// Push the ElementNode\n\t\t\tnodes.push( this.createElementNode( tagText, tagName, isClosingTag ) );\n\n\t\t\tlastIndex = currentResult.index + tagText.length;\n\t\t}\n\n\t\t// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\n\t\tif( lastIndex < html.length ) {\n\t\t\tvar text = html.substring( lastIndex );\n\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( text ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( text );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\t\t}\n\n\t\treturn nodes;\n\t},\n\n\n\t/**\n\t * Parses text and HTML entity nodes from a given string. The input string should not have any HTML tags (elements)\n\t * within it.\n\t *\n\t * @private\n\t * @param {String} text The text to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to represent the\n\t *   {@link Autolinker.htmlParser.TextNode TextNodes} and {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\n\t */\n\tparseTextAndEntityNodes : function( text ) {\n\t\tvar nodes = [],\n\t\t    textAndEntityTokens = Autolinker.Util.splitAndCapture( text, this.htmlCharacterEntitiesRegex );  // split at HTML entities, but include the HTML entities in the results array\n\n\t\t// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\n\t\t// For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the\n\t\t//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\n\t\tfor( var i = 0, len = textAndEntityTokens.length; i < len; i += 2 ) {\n\t\t\tvar textToken = textAndEntityTokens[ i ],\n\t\t\t    entityToken = textAndEntityTokens[ i + 1 ];\n\n\t\t\tif( textToken ) nodes.push( this.createTextNode( textToken ) );\n\t\t\tif( entityToken ) nodes.push( this.createEntityNode( entityToken ) );\n\t\t}\n\t\treturn nodes;\n\t},\n\n\n\t/**\n\t * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\n\t *\n\t * @private\n\t * @param {String} tagText The full text of the tag (element) that was matched, including its attributes.\n\t * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would be passed to this method as \"img\".\n\t * @param {Boolean} isClosingTag `true` if it's a closing tag, false otherwise.\n\t * @return {Autolinker.htmlParser.ElementNode}\n\t */\n\tcreateElementNode : function( tagText, tagName, isClosingTag ) {\n\t\treturn new Autolinker.htmlParser.ElementNode( {\n\t\t\ttext    : tagText,\n\t\t\ttagName : tagName.toLowerCase(),\n\t\t\tclosing : isClosingTag\n\t\t} );\n\t},\n\n\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\n\t *\n\t * @private\n\t * @param {String} text The text that was matched for the HTML entity (such as '&amp;nbsp;').\n\t * @return {Autolinker.htmlParser.EntityNode}\n\t */\n\tcreateEntityNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.EntityNode( { text: text } );\n\t},\n\n\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\n\t *\n\t * @private\n\t * @param {String} text The text that was matched.\n\t * @return {Autolinker.htmlParser.TextNode}\n\t */\n\tcreateTextNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.TextNode( { text: text } );\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.htmlParser.HtmlNode\n *\n * Represents an HTML node found in an input string. An HTML node is one of the following:\n *\n * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.\n * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.\n * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML\n *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;\n */\nAutolinker.htmlParser.HtmlNode = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @cfg {String} text (required)\n\t *\n\t * The original text that was matched for the HtmlNode.\n\t *\n\t * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's\n\t *   text.\n\t * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.\n\t * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of\n\t *   the HTML entity.\n\t */\n\ttext : \"\",\n\n\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\n\n\t/**\n\t * Retrieves the {@link #text} for the HtmlNode.\n\t *\n\t * @return {String}\n\t */\n\tgetText : function() {\n\t\treturn this.text;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.ElementNode\n * @extends Autolinker.htmlParser.HtmlNode\n *\n * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n *\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.ElementNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\n\t/**\n\t * @cfg {String} tagName (required)\n\t *\n\t * The name of the tag that was matched.\n\t */\n\ttagName : '',\n\n\t/**\n\t * @cfg {Boolean} closing (required)\n\t *\n\t * `true` if the element (tag) is a closing tag, `false` if its an opening tag.\n\t */\n\tclosing : false,\n\n\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'element';\n\t},\n\n\n\t/**\n\t * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns \"img\".\n\t *\n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName;\n\t},\n\n\n\t/**\n\t * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns\n\t * `false`, while &lt;/div&gt; returns `true`.\n\t *\n\t * @return {Boolean}\n\t */\n\tisClosing : function() {\n\t\treturn this.closing;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.EntityNode\n * @extends Autolinker.htmlParser.HtmlNode\n *\n * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.\n *\n * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes\n * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\n *\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.EntityNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'entity';\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.TextNode\n * @extends Autolinker.htmlParser.HtmlNode\n *\n * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n *\n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.TextNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'text';\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.matchParser.MatchParser\n * @extends Object\n *\n * Used by Autolinker to parse {@link #urls URLs}, {@link #emails email addresses}, and {@link #twitter Twitter handles},\n * given an input string of text.\n *\n * The MatchParser is fed a non-HTML string in order to search out URLs, email addresses and Twitter handles. Autolinker\n * first uses the {@link HtmlParser} to \"walk around\" HTML tags, and then the text around the HTML tags is passed into\n * the MatchParser in order to find the actual matches.\n */\nAutolinker.matchParser.MatchParser = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @cfg {Boolean} urls\n\t *\n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\n\t/**\n\t * @cfg {Boolean} email\n\t *\n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\n\t/**\n\t * @cfg {Boolean} twitter\n\t *\n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t *\n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text\n\t * in {@link Autolinker.match.Url URL matches}, `false` otherwise.\n\t *\n\t * TODO: Handle this before a URL Match object is instantiated.\n\t */\n\tstripPrefix : true,\n\n\n\t/**\n\t * @private\n\t * @property {RegExp} matcherRegex\n\t *\n\t * The regular expression that matches URLs, email addresses, and Twitter handles.\n\t *\n\t * This regular expression has the following capturing groups:\n\t *\n\t * 1. Group that is used to determine if there is a Twitter handle match (i.e. \\@someTwitterUser). Simply check for its\n\t *    existence to determine if there is a Twitter handle match. The next couple of capturing groups give information\n\t *    about the Twitter handle match.\n\t * 2. The whitespace character before the \\@sign in a Twitter handle. This is needed because there are no lookbehinds in\n\t *    JS regular expressions, and can be used to reconstruct the original string in a replace().\n\t * 3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.\n\t * 4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full\n\t *    address. Ex: 'me@my.com'\n\t * 5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.\n\t *    This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor\n\t * 6. Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single\n\t *    word, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * 7. A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a\n\t *    protocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match\n\t *    or the // was in a string we don't want to auto-link.\n\t * 8. A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a\n\t *    protocol-relative match. See #6 for more info.\n\t */\n\tmatcherRegex : (function() {\n\t\tvar twitterRegex = /(^|[^\\w])@(\\w{1,15})/,              // For matching a twitter handle. Ex: @gregory_jacobs\n\n\t\t    emailRegex = /(?:[\\-;:&=\\+\\$,\\w\\.]+@)/,             // something@ for email addresses (a.k.a. local-part)\n\n\t\t    protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\t    wwwRegex = /(?:www\\.)/,                             // starting with 'www.'\n\t\t    domainNameRegex = /[A-Za-z0-9\\.\\-]*[A-Za-z0-9\\-]/,  // anything looking at all like a domain, non-unicode domains, not ending in a period\n\t\t    tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/,   // match our known top level domains (TLDs)\n\n\t\t    // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t    // http://blog.codinghorror.com/the-problem-with-urls/\n\t\t    urlSuffixRegex = /[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]?!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]]/;\n\n\t\treturn new RegExp( [\n\t\t\t'(',  // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace()\n\t\t\t\t// *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and\n\t\t\t\t// *** Capturing group $3, which matches the actual twitter handle\n\t\t\t\ttwitterRegex.source,\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $4, which is used to determine an email match\n\t\t\t\temailRegex.source,\n\t\t\t\tdomainNameRegex.source,\n\t\t\t\ttldRegex.source,\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $5, which is used to match a URL\n\t\t\t\t'(?:', // parens to cover match for protocol (optional), and domain\n\t\t\t\t\t'(',  // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)\n\t\t\t\t\t\tprotocolRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\n\t\t\t\t\t'|',\n\n\t\t\t\t\t'(?:',  // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\twwwRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\n\t\t\t\t\t'|',\n\n\t\t\t\t\t'(?:',  // non-capturing paren for known a TLD url (ex: google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t\ttldRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t')',\n\n\t\t\t\t'(?:' + urlSuffixRegex.source + ')?',  // match for path, query string, and/or hash anchor - optional\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\n\t/**\n\t * @private\n\t * @property {RegExp} charBeforeProtocolRelMatchRegex\n\t *\n\t * The regular expression used to retrieve the character before a protocol-relative URL match.\n\t *\n\t * This is used in conjunction with the {@link #matcherRegex}, which needs to grab the character before a protocol-relative\n\t * '//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped\n\t * from the URL.\n\t */\n\tcharBeforeProtocolRelMatchRegex : /^(.)?\\/\\//,\n\n\t/**\n\t * @private\n\t * @property {Autolinker.MatchValidator} matchValidator\n\t *\n\t * The MatchValidator object, used to filter out any false positives from the {@link #matcherRegex}. See\n\t * {@link Autolinker.MatchValidator} for details.\n\t */\n\n\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\n\t\tthis.matchValidator = new Autolinker.MatchValidator();\n\t},\n\n\n\t/**\n\t * Parses the input `text` to search for URLs/emails/Twitter handles, and calls the `replaceFn`\n\t * to allow replacements of the matches. Returns the `text` with matches replaced.\n\t *\n\t * @param {String} text The text to search and repace matches in.\n\t * @param {Function} replaceFn The iterator function to handle the replacements. The function takes a\n\t *   single argument, a {@link Autolinker.match.Match} object, and should return the text that should\n\t *   make the replacement.\n\t * @param {Object} [contextObj=window] The context object (\"scope\") to run the `replaceFn` in.\n\t * @return {String}\n\t */\n\treplace : function( text, replaceFn, contextObj ) {\n\t\tvar me = this;  // for closure\n\n\t\treturn text.replace( this.matcherRegex, function( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 ) {\n\t\t\tvar matchDescObj = me.processCandidateMatch( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 );  // \"match description\" object\n\n\t\t\t// Return out with no changes for match types that are disabled (url, email, twitter), or for matches that are\n\t\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\t\tif( !matchDescObj ) {\n\t\t\t\treturn matchStr;\n\n\t\t\t} else {\n\t\t\t\t// Generate replacement text for the match from the `replaceFn`\n\t\t\t\tvar replaceStr = replaceFn.call( contextObj, matchDescObj.match );\n\t\t\t\treturn matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;\n\t\t\t}\n\t\t} );\n\t},\n\n\n\t/**\n\t * Processes a candidate match from the {@link #matcherRegex}.\n\t *\n\t * Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the {@link #matchValidator}. In\n\t * this case, the method returns `null`. Otherwise, a valid Object with `prefixStr`, `match`, and `suffixStr` is returned.\n\t *\n\t * @private\n\t * @param {String} matchStr The full match that was found by the {@link #matcherRegex}.\n\t * @param {String} twitterMatch The matched text of a Twitter handle, if the match is a Twitter match.\n\t * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char before the @ sign in a Twitter handle match. This\n\t *   is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.\n\t * @param {String} twitterHandle The actual Twitter user (i.e the word after the @ sign in a Twitter match).\n\t * @param {String} emailAddressMatch The matched email address for an email address match.\n\t * @param {String} urlMatch The matched URL string for a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative match from a 'www' url, with the character that\n\t *   comes before the '//'.\n\t * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative match from a TLD (top level domain) match, with\n\t *   the character that comes before the '//'.\n\t *\n\t * @return {Object} A \"match description object\". This will be `null` if the match was invalid, or if a match type is disabled.\n\t *   Otherwise, this will be an Object (map) with the following properties:\n\t * @return {String} return.prefixStr The char(s) that should be prepended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into\n\t *   the replacement stream.\n\t * @return {String} return.suffixStr The char(s) that should be appended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into\n\t *   the replacement stream.\n\t * @return {Autolinker.match.Match} return.match The Match object that represents the match that was found.\n\t */\n\tprocessCandidateMatch : function(\n\t\tmatchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle,\n\t\temailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch\n\t) {\n\t\t// Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will\n\t\t// be added to `prefixStr` and `suffixStr`).\n\n\t\tvar protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t    match,  // Will be an Autolinker.match.Match object\n\n\t\t    prefixStr = \"\",       // A string to use to prefix the anchor tag that is created. This is needed for the Twitter handle match\n\t\t    suffixStr = \"\";       // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.\n\n\n\t\t// Return out with `null` for match types that are disabled (url, email, twitter), or for matches that are\n\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\tif(\n\t\t\t( twitterMatch && !this.twitter ) || ( emailAddressMatch && !this.email ) || ( urlMatch && !this.urls ) ||\n\t\t\t!this.matchValidator.isValidMatch( urlMatch, protocolUrlMatch, protocolRelativeMatch )\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Handle a closing parenthesis at the end of the match, and exclude it if there is not a matching open parenthesis\n\t\t// in the match itself.\n\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\n\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\n\t\t\tsuffixStr = \")\";  // this will be added after the generated <a> tag\n\t\t}\n\n\n\t\tif( emailAddressMatch ) {\n\t\t\tmatch = new Autolinker.match.Email( { matchedText: matchStr, email: emailAddressMatch } );\n\n\t\t} else if( twitterMatch ) {\n\t\t\t// fix up the `matchStr` if there was a preceding whitespace char, which was needed to determine the match\n\t\t\t// itself (since there are no look-behinds in JS regexes)\n\t\t\tif( twitterHandlePrefixWhitespaceChar ) {\n\t\t\t\tprefixStr = twitterHandlePrefixWhitespaceChar;\n\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match\n\t\t\t}\n\t\t\tmatch = new Autolinker.match.Twitter( { matchedText: matchStr, twitterHandle: twitterHandle } );\n\n\t\t} else {  // url match\n\t\t\t// If it's a protocol-relative '//' match, remove the character before the '//' (which the matcherRegex needed\n\t\t\t// to match due to the lack of a negative look-behind in JavaScript regular expressions)\n\t\t\tif( protocolRelativeMatch ) {\n\t\t\t\tvar charBeforeMatch = protocolRelativeMatch.match( this.charBeforeProtocolRelMatchRegex )[ 1 ] || \"\";\n\n\t\t\t\tif( charBeforeMatch ) {  // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n\t\t\t\t\tprefixStr = charBeforeMatch;\n\t\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed char from the match\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmatch = new Autolinker.match.Url( {\n\t\t\t\tmatchedText : matchStr,\n\t\t\t\turl : matchStr,\n\t\t\t\tprotocolUrlMatch : !!protocolUrlMatch,\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\n\t\treturn {\n\t\t\tprefixStr : prefixStr,\n\t\t\tsuffixStr : suffixStr,\n\t\t\tmatch     : match\n\t\t};\n\t},\n\n\n\t/**\n\t * Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed\n\t * from the match itself, and appended after the generated anchor tag in {@link #processTextNode}.\n\t *\n\t * A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis\n\t * for URLs such as \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n\t *\n\t * However, an extra parenthesis *will* be included when the URL itself is wrapped in parenthesis, such as in the case of\n\t * \"(wikipedia.com/something_(disambiguation))\". In this case, the last closing parenthesis should *not* be part of the URL\n\t * itself, and this method will return `true`.\n\t *\n\t * @private\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis at the end of the `matchStr`, `false` otherwise.\n\t */\n\tmatchHasUnbalancedClosingParen : function( matchStr ) {\n\t\tvar lastChar = matchStr.charAt( matchStr.length - 1 );\n\n\t\tif( lastChar === ')' ) {\n\t\t\tvar openParensMatch = matchStr.match( /\\(/g ),\n\t\t\t    closeParensMatch = matchStr.match( /\\)/g ),\n\t\t\t    numOpenParens = ( openParensMatch && openParensMatch.length ) || 0,\n\t\t\t    numCloseParens = ( closeParensMatch && closeParensMatch.length ) || 0;\n\n\t\t\tif( numOpenParens < numCloseParens ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n} );\n/*global Autolinker */\n/*jshint scripturl:true */\n/**\n * @private\n * @class Autolinker.MatchValidator\n * @extends Object\n *\n * Used by Autolinker to filter out false positives from the {@link Autolinker#matcherRegex}.\n *\n * Due to the limitations of regular expressions (including the missing feature of look-behinds in JS regular expressions),\n * we cannot always determine the validity of a given match. This class applies a bit of additional logic to filter out any\n * false positives that have been matched by the {@link Autolinker#matcherRegex}.\n */\nAutolinker.MatchValidator = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @private\n\t * @property {RegExp} invalidProtocolRelMatchRegex\n\t *\n\t * The regular expression used to check a potential protocol-relative URL match, coming from the\n\t * {@link Autolinker#matcherRegex}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t *\n\t * This regular expression checks to see if there is a word character before the '//' match in order to determine if\n\t * we should actually autolink a protocol-relative URL. This is needed because there is no negative look-behind in\n\t * JavaScript regular expressions.\n\t *\n\t * For instance, we want to autolink something like \"Go to: //google.com\", but we don't want to autolink something\n\t * like \"abc//google.com\"\n\t */\n\tinvalidProtocolRelMatchRegex : /^[\\w]\\/\\//,\n\n\t/**\n\t * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n\t *\n\t * @private\n\t * @property {RegExp} hasFullProtocolRegex\n\t */\n\thasFullProtocolRegex : /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//,\n\n\t/**\n\t * Regex to find the URI scheme, such as 'mailto:'.\n\t *\n\t * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n\t *\n\t * @private\n\t * @property {RegExp} uriSchemeRegex\n\t */\n\turiSchemeRegex : /^[A-Za-z][-.+A-Za-z0-9]+:/,\n\n\t/**\n\t * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n\t *\n\t * @private\n\t * @property {RegExp} hasWordCharAfterProtocolRegex\n\t */\n\thasWordCharAfterProtocolRegex : /:[^\\s]*?[A-Za-z]/,\n\n\n\t/**\n\t * Determines if a given match found by {@link Autolinker#processTextNode} is valid. Will return `false` for:\n\t *\n\t * 1) URL matches which do not have at least have one period ('.') in the domain name (effectively skipping over\n\t *    matches like \"abc:def\"). However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n\t * 2) URL matches which do not have at least one word character in the domain name (effectively skipping over\n\t *    matches like \"git:1.0\").\n\t * 3) A protocol-relative url match (a URL beginning with '//') whose previous character is a word character\n\t *    (effectively skipping over strings like \"abc//google.com\")\n\t *\n\t * Otherwise, returns `true`.\n\t *\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if the match given is valid and should be processed, or `false` if the match is invalid and/or\n\t *   should just not be processed.\n\t */\n\tisValidMatch : function( urlMatch, protocolUrlMatch, protocolRelativeMatch ) {\n\t\tif(\n\t\t\t( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||\n\t\t\tthis.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||       // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n\t\t\tthis.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) ||  // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n\t\t\tthis.isInvalidProtocolRelativeMatch( protocolRelativeMatch )                 // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\n\t/**\n\t * Determines if the URI scheme is a valid scheme to be autolinked. Returns `false` if the scheme is\n\t * 'javascript:' or 'vbscript:'\n\t *\n\t * @private\n\t * @param {String} uriSchemeMatch The match URL string for a full URI scheme match. Ex: 'http://yahoo.com'\n\t *   or 'mailto:a@a.com'.\n\t * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n\t */\n\tisValidUriScheme : function( uriSchemeMatch ) {\n\t\tvar uriScheme = uriSchemeMatch.match( this.uriSchemeRegex )[ 0 ].toLowerCase();\n\n\t\treturn ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );\n\t},\n\n\n\t/**\n\t * Determines if a URL match does not have either:\n\t *\n\t * a) a full protocol (i.e. 'http://'), or\n\t * b) at least one dot ('.') in the domain name (for a non-full-protocol match).\n\t *\n\t * Either situation is considered an invalid URL (ex: 'git:d' does not have either the '://' part, or at least one dot\n\t * in the domain name. If the match was 'git:abc.com', we would consider this valid.)\n\t *\n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @return {Boolean} `true` if the URL match does not have a full protocol, or at least one dot ('.') in a non-full-protocol\n\t *   match.\n\t */\n\turlMatchDoesNotHaveProtocolOrDot : function( urlMatch, protocolUrlMatch ) {\n\t\treturn ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );\n\t},\n\n\n\t/**\n\t * Determines if a URL match does not have at least one word character after the protocol (i.e. in the domain name).\n\t *\n\t * At least one letter character must exist in the domain name after a protocol match. Ex: skip over something\n\t * like \"git:1.0\"\n\t *\n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to\n\t *   know whether or not we have a protocol in the URL string, in order to check for a word character after the protocol\n\t *   separator (':').\n\t * @return {Boolean} `true` if the URL match does not have at least one word character in it after the protocol, `false`\n\t *   otherwise.\n\t */\n\turlMatchDoesNotHaveAtLeastOneWordChar : function( urlMatch, protocolUrlMatch ) {\n\t\tif( urlMatch && protocolUrlMatch ) {\n\t\t\treturn !this.hasWordCharAfterProtocolRegex.test( urlMatch );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\n\n\t/**\n\t * Determines if a protocol-relative match is an invalid one. This method returns `true` if there is a `protocolRelativeMatch`,\n\t * and that match contains a word character before the '//' (i.e. it must contain whitespace or nothing before the '//' in\n\t * order to be considered valid).\n\t *\n\t * @private\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if it is an invalid protocol-relative match, `false` otherwise.\n\t */\n\tisInvalidProtocolRelativeMatch : function( protocolRelativeMatch ) {\n\t\treturn ( !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test( protocolRelativeMatch ) );\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.match.Match\n *\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *\n *                 case 'twitter' :\n *                     console.log( \"twitter: \", match.getTwitterHandle() );\n *             }\n *         }\n *     } );\n *\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nAutolinker.match.Match = Autolinker.Util.extend( Object, {\n\n\t/**\n\t * @cfg {String} matchedText (required)\n\t *\n\t * The original text that was matched.\n\t */\n\n\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\n\n\t/**\n\t * Returns the original text that was matched.\n\t *\n\t * @return {String}\n\t */\n\tgetMatchedText : function() {\n\t\treturn this.matchedText;\n\t},\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorHref : Autolinker.Util.abstractMethod,\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorText : Autolinker.Util.abstractMethod\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Email\n * @extends Autolinker.match.Match\n *\n * Represents a Email match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Email = Autolinker.Util.extend( Autolinker.match.Match, {\n\n\t/**\n\t * @cfg {String} email (required)\n\t *\n\t * The email address that was matched.\n\t */\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'email';\n\t},\n\n\n\t/**\n\t * Returns the email address that was matched.\n\t *\n\t * @return {String}\n\t */\n\tgetEmail : function() {\n\t\treturn this.email;\n\t},\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'mailto:' + this.email;\n\t},\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn this.email;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Twitter\n * @extends Autolinker.match.Match\n *\n * Represents a Twitter match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Twitter = Autolinker.Util.extend( Autolinker.match.Match, {\n\n\t/**\n\t * @cfg {String} twitterHandle (required)\n\t *\n\t * The Twitter handle that was matched.\n\t */\n\n\n\t/**\n\t * Returns the type of match that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'twitter';\n\t},\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetTwitterHandle : function() {\n\t\treturn this.twitterHandle;\n\t},\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'https://twitter.com/' + this.twitterHandle;\n\t},\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn '@' + this.twitterHandle;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Url = Autolinker.Util.extend( Autolinker.match.Match, {\n\n\t/**\n\t * @cfg {String} url (required)\n\t *\n\t * The url that was matched.\n\t */\n\n\t/**\n\t * @cfg {Boolean} protocolUrlMatch (required)\n\t *\n\t * `true` if the URL is a match which already has a protocol (i.e. 'http://'), `false` if the match was from a 'www' or\n\t * known TLD match.\n\t */\n\n\t/**\n\t * @cfg {Boolean} protocolRelativeMatch (required)\n\t *\n\t * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',\n\t * and will be either http:// or https:// based on the protocol that the site is loaded under.\n\t */\n\n\t/**\n\t * @cfg {Boolean} stripPrefix (required)\n\t * @inheritdoc Autolinker#stripPrefix\n\t */\n\n\n\t/**\n\t * @private\n\t * @property {RegExp} urlPrefixRegex\n\t *\n\t * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n\t */\n\turlPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\n\n\t/**\n\t * @private\n\t * @property {RegExp} protocolRelativeRegex\n\t *\n\t * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n\t * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t */\n\tprotocolRelativeRegex : /^\\/\\//,\n\n\t/**\n\t * @private\n\t * @property {Boolean} protocolPrepended\n\t *\n\t * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n\t * {@link #url} did not have a protocol)\n\t */\n\tprotocolPrepended : false,\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'url';\n\t},\n\n\n\t/**\n\t * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n\t * match was missing a protocol.\n\t *\n\t * @return {String}\n\t */\n\tgetUrl : function() {\n\t\tvar url = this.url;\n\n\t\t// if the url string doesn't begin with a protocol, assume 'http://'\n\t\tif( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {\n\t\t\turl = this.url = 'http://' + url;\n\n\t\t\tthis.protocolPrepended = true;\n\t\t}\n\n\t\treturn url;\n\t},\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\tvar url = this.getUrl();\n\n\t\treturn url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n\t},\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\tvar anchorText = this.getUrl();\n\n\t\tif( this.protocolRelativeMatch ) {\n\t\t\t// Strip off any protocol-relative '//' from the anchor text\n\t\t\tanchorText = this.stripProtocolRelativePrefix( anchorText );\n\t\t}\n\t\tif( this.stripPrefix ) {\n\t\t\tanchorText = this.stripUrlPrefix( anchorText );\n\t\t}\n\t\tanchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one\n\n\t\treturn anchorText;\n\t},\n\n\n\t// ---------------------------------------\n\n\t// Utility Functionality\n\n\t/**\n\t * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n\t *\n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   url prefix (such as stripping off \"http://\")\n\t * @return {String} The `anchorText`, with the prefix stripped.\n\t */\n\tstripUrlPrefix : function( text ) {\n\t\treturn text.replace( this.urlPrefixRegex, '' );\n\t},\n\n\n\t/**\n\t * Strips any protocol-relative '//' from the anchor text.\n\t *\n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   protocol-relative prefix (such as stripping off \"//\")\n\t * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n\t */\n\tstripProtocolRelativePrefix : function( text ) {\n\t\treturn text.replace( this.protocolRelativeRegex, '' );\n\t},\n\n\n\t/**\n\t * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n\t *\n\t * @private\n\t * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n\t *   slash ('/') that may exist.\n\t * @return {String} The `anchorText`, with the trailing slash removed.\n\t */\n\tremoveTrailingSlash : function( anchorText ) {\n\t\tif( anchorText.charAt( anchorText.length - 1 ) === '/' ) {\n\t\t\tanchorText = anchorText.slice( 0, -1 );\n\t\t}\n\t\treturn anchorText;\n\t}\n\n} );\nreturn Autolinker;\n\n}));\n"]}